{"mappings":"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","sources":["./src/cubing/twisty/index.ts","./src/cubing/twisty/dom/TwistyAlgViewer.ts"],"sourcesContent":["export { Twisty3DPuzzle } from \"./3D/puzzles/Twisty3DPuzzle\";\nexport {\n  experimentalSetShareAllNewRenderers,\n  experimentalShowRenderStats,\n  Twisty3DCanvas,\n} from \"./dom/viewers/Twisty3DCanvas\";\nexport { TwistyPlayer } from \"./dom/TwistyPlayer\";\nexport {\n  TwistyPlayerInitialConfig,\n  ExperimentalStickering,\n} from \"./dom/TwistyPlayerConfig\";\nexport {\n  TimelineActionEvent,\n  TimestampLocationType,\n} from \"./animation/Timeline\";\nexport { ExperimentalTwistyAlgViewer } from \"./dom/TwistyAlgViewer\";\n\n// Old\nexport { Cube3D } from \"./3D/puzzles/Cube3D\";\nexport { PG3D } from \"./3D/puzzles/PG3D\";\nexport { AlgIndexer } from \"./animation/indexer/AlgIndexer\";\nexport { SimpleAlgIndexer } from \"./animation/indexer/SimpleAlgIndexer\";\nexport { TreeAlgIndexer } from \"./animation/indexer/tree/TreeAlgIndexer\";\nexport { KPuzzleWrapper as KSolvePuzzle } from \"./3D/puzzles/KPuzzleWrapper\";\n\nexport { BackViewLayout } from \"./dom/viewers/TwistyViewerWrapper\";\n","import {\n  Alg,\n  Commutator,\n  Conjugate,\n  experimentalDirect,\n  ExperimentalIterationDirection,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalDownUp,\n  Unit,\n} from \"../../alg\";\nimport { Parsed } from \"../../alg/parse\";\nimport { puzzles } from \"../../puzzles\";\nimport { TwistyPlayer } from \"../../twisty\";\nimport { KPuzzleWrapper } from \"../3D/puzzles/KPuzzleWrapper\";\nimport { TimeRange } from \"../animation/cursor/AlgCursor\";\nimport { MillisecondTimestamp } from \"../animation/cursor/CursorTypes\";\nimport { TreeAlgIndexer } from \"../animation/indexer/tree/TreeAlgIndexer\";\nimport {\n  customElementsShim,\n  HTMLElementShim,\n} from \"./element/node-custom-element-shims\";\n\nconst DEFAULT_OFFSET_MS = 250; // TODO: make this a fraction?\n\nclass DataDown {\n  earliestMoveIndex: number;\n  twistyAlgViewer: ExperimentalTwistyAlgViewer;\n  direction: ExperimentalIterationDirection;\n}\n\nclass DataUp {\n  moveCount: number;\n  element: TwistyAlgWrapperElem | TwistyAlgLeafElem;\n}\n\nclass TwistyAlgLeafElem extends HTMLElementShim {\n  constructor(\n    className: string,\n    text: string,\n    dataDown: DataDown,\n    public algOrUnit: Alg | Unit,\n    offsetIntoMove: boolean,\n  ) {\n    super();\n    this.textContent = text;\n    this.classList.add(className);\n\n    this.addEventListener(\"click\", () => {\n      dataDown.twistyAlgViewer.jumpToIndex(\n        dataDown.earliestMoveIndex,\n        offsetIntoMove,\n      );\n    });\n  }\n\n  pathToIndex(_index: number): (TwistyAlgWrapperElem | TwistyAlgLeafElem)[] {\n    return [];\n  }\n}\n\ncustomElementsShim.define(\"twisty-alg-leaf-elem\", TwistyAlgLeafElem);\n\nclass TwistyAlgWrapperElem extends HTMLElementShim {\n  private queue: (Element | Text)[] = [];\n\n  constructor(className: string, public algOrUnit: Alg | Unit) {\n    super();\n    this.classList.add(className);\n  }\n\n  addString(str: string) {\n    this.queue.push(document.createTextNode(str));\n  }\n\n  addElem(dataUp: DataUp): number {\n    this.queue.push(dataUp.element);\n    return dataUp.moveCount;\n  }\n\n  flushQueue(\n    direction: ExperimentalIterationDirection = ExperimentalIterationDirection.Forwards,\n  ): void {\n    for (const node of maybeReverseList(this.queue, direction)) {\n      this.append(node);\n    }\n    this.queue = [];\n  }\n\n  pathToIndex(_index: number): (TwistyAlgWrapperElem | TwistyAlgLeafElem)[] {\n    return [];\n  }\n}\n\ncustomElementsShim.define(\"twisty-alg-wrapper-elem\", TwistyAlgWrapperElem);\n\nfunction oppositeDirection(\n  direction: ExperimentalIterationDirection,\n): ExperimentalIterationDirection {\n  return direction === ExperimentalIterationDirection.Forwards\n    ? ExperimentalIterationDirection.Backwards\n    : ExperimentalIterationDirection.Forwards;\n}\n\nfunction updateDirectionByAmount(\n  currentDirection: ExperimentalIterationDirection,\n  amount: number,\n): ExperimentalIterationDirection {\n  return amount < 0 ? oppositeDirection(currentDirection) : currentDirection;\n}\n\nfunction maybeReverseList<T>(\n  l: T[],\n  direction: ExperimentalIterationDirection,\n): T[] {\n  if (direction === ExperimentalIterationDirection.Forwards) {\n    return l;\n  }\n  // console.log(\"rev\", Array.from(l).reverse());\n  // return Array.from(l).reverse();\n  const copy = Array.from(l);\n  copy.reverse();\n  return copy;\n}\n\nclass AlgToDOMTree extends TraversalDownUp<DataDown, DataUp, DataUp> {\n  public traverseAlg(alg: Alg, dataDown: DataDown): DataUp {\n    let moveCount = 0;\n    const element = new TwistyAlgWrapperElem(\"twisty-alg-alg\", alg); // TODO: pick a better class name.\n    let first = true;\n    for (const unit of experimentalDirect(alg.units(), dataDown.direction)) {\n      if (!first) {\n        element.addString(\" \");\n      }\n      first = false;\n      moveCount += element.addElem(\n        this.traverseUnit(unit, {\n          earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n          twistyAlgViewer: dataDown.twistyAlgViewer,\n          direction: dataDown.direction,\n        }),\n      );\n    }\n    element.flushQueue(dataDown.direction);\n    return {\n      moveCount: moveCount,\n      element,\n    };\n  }\n\n  public traverseGrouping(grouping: Grouping, dataDown: DataDown): DataUp {\n    const direction = updateDirectionByAmount(\n      dataDown.direction,\n      grouping.experimentalEffectiveAmount,\n    );\n    let moveCount = 0;\n    const element = new TwistyAlgWrapperElem(\"twisty-alg-grouping\", grouping);\n    element.addString(\"(\");\n    moveCount += element.addElem(\n      this.traverseAlg(grouping.experimentalAlg, {\n        earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n        twistyAlgViewer: dataDown.twistyAlgViewer,\n        direction,\n      }),\n    );\n    element.addString(\")\" + grouping.experimentalRepetitionSuffix);\n    element.flushQueue();\n    return {\n      moveCount: moveCount * Math.abs(grouping.experimentalEffectiveAmount),\n      element,\n    };\n  }\n\n  public traverseMove(move: Move, dataDown: DataDown): DataUp {\n    const element = new TwistyAlgLeafElem(\n      \"twisty-alg-move\",\n      move.toString(),\n      dataDown,\n      move,\n      true,\n    );\n    dataDown.twistyAlgViewer.highlighter.addMove(\n      (move as Parsed<Move>).charIndex,\n      element,\n    );\n    return {\n      moveCount: 1,\n      element,\n    };\n  }\n\n  public traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUp {\n    let moveCount = 0;\n    const element = new TwistyAlgWrapperElem(\n      \"twisty-alg-commutator\",\n      commutator,\n    );\n    element.addString(\"[\");\n    element.flushQueue();\n    const direction = updateDirectionByAmount(\n      dataDown.direction,\n      commutator.experimentalEffectiveAmount,\n    );\n    const [first, second]: Alg[] = maybeReverseList(\n      [commutator.A, commutator.B],\n      direction,\n    );\n    moveCount += element.addElem(\n      this.traverseAlg(first, {\n        earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n        twistyAlgViewer: dataDown.twistyAlgViewer,\n        direction,\n      }),\n    );\n    element.addString(\", \");\n    moveCount += element.addElem(\n      this.traverseAlg(second, {\n        earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n        twistyAlgViewer: dataDown.twistyAlgViewer,\n        direction,\n      }),\n    );\n    element.flushQueue(direction);\n    element.addString(\"]\" + commutator.experimentalRepetitionSuffix);\n    element.flushQueue();\n    return {\n      moveCount:\n        moveCount * 2 * Math.abs(commutator.experimentalEffectiveAmount),\n      element,\n    };\n  }\n\n  public traverseConjugate(conjugate: Conjugate, dataDown: DataDown): DataUp {\n    let moveCount = 0;\n    const element = new TwistyAlgWrapperElem(\"twisty-alg-conjugate\", conjugate);\n    element.addString(\"[\");\n    const direction = updateDirectionByAmount(\n      dataDown.direction,\n      conjugate.experimentalEffectiveAmount,\n    );\n    const aLen = element.addElem(\n      this.traverseAlg(conjugate.A, {\n        earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n        twistyAlgViewer: dataDown.twistyAlgViewer,\n        direction,\n      }),\n    );\n    moveCount += aLen;\n    element.addString(\": \");\n    moveCount += element.addElem(\n      this.traverseAlg(conjugate.B, {\n        earliestMoveIndex: dataDown.earliestMoveIndex + moveCount,\n        twistyAlgViewer: dataDown.twistyAlgViewer,\n        direction,\n      }),\n    );\n    element.addString(\"]\" + conjugate.experimentalRepetitionSuffix);\n    element.flushQueue();\n    return {\n      moveCount:\n        (moveCount + aLen) * Math.abs(conjugate.experimentalEffectiveAmount),\n      element,\n    };\n  }\n\n  public traversePause(pause: Pause, dataDown: DataDown): DataUp {\n    return {\n      moveCount: 1,\n      element: new TwistyAlgLeafElem(\n        \"twisty-alg-pause\",\n        \".\",\n        dataDown,\n        pause,\n        true,\n      ),\n    };\n  }\n\n  public traverseNewline(newline: Newline, _dataDown: DataDown): DataUp {\n    const element = new TwistyAlgWrapperElem(\"twisty-alg-newline\", newline);\n    element.append(document.createElement(\"br\"));\n    return {\n      moveCount: 0,\n      element,\n    };\n  }\n\n  public traverseLineComment(\n    lineComment: LineComment,\n    dataDown: DataDown,\n  ): DataUp {\n    return {\n      moveCount: 0,\n      element: new TwistyAlgLeafElem(\n        \"twisty-alg-line-comment\",\n        `//${lineComment.text}`,\n        dataDown,\n        lineComment,\n        false,\n      ),\n    };\n  }\n}\n\nconst algToDOMTreeInstance = new AlgToDOMTree();\nconst algToDOMTree = algToDOMTreeInstance.traverseAlg.bind(\n  algToDOMTreeInstance,\n) as (alg: Alg, dataDown: DataDown) => DataUp;\n\nclass MoveHighlighter {\n  moveCharIndexMap: Map<number, TwistyAlgLeafElem> = new Map();\n  currentElem: TwistyAlgLeafElem | null = null;\n\n  addMove(charIndex: number, elem: TwistyAlgLeafElem): void {\n    this.moveCharIndexMap.set(charIndex, elem);\n  }\n\n  set(move: Parsed<Move> | null): void {\n    const newElem = move\n      ? this.moveCharIndexMap.get(move.charIndex) ?? null\n      : null;\n    if (this.currentElem === newElem) {\n      return;\n    }\n    this.currentElem?.classList.remove(\"twisty-alg-current-move\");\n    newElem?.classList.add(\"twisty-alg-current-move\");\n    this.currentElem = newElem;\n  }\n}\n\nexport class ExperimentalTwistyAlgViewer extends HTMLElementShim {\n  highlighter: MoveHighlighter = new MoveHighlighter();\n  #domTree: TwistyAlgWrapperElem | TwistyAlgLeafElem;\n  twistyPlayer: TwistyPlayer | null = null;\n  lastClickTimestamp: number | null = null;\n  constructor(options?: { twistyPlayer?: TwistyPlayer }) {\n    super();\n    if (options?.twistyPlayer) {\n      this.setTwistyPlayer(options?.twistyPlayer);\n    }\n  }\n\n  protected connectedCallback(): void {\n    // nothing to do?\n  }\n\n  private setAlg(alg: Alg): void {\n    this.#domTree = algToDOMTree(alg, {\n      earliestMoveIndex: 0,\n      twistyAlgViewer: this,\n      direction: ExperimentalIterationDirection.Forwards,\n    }).element;\n    this.textContent = \"\";\n    this.appendChild(this.#domTree);\n  }\n\n  setTwistyPlayer(twistyPlayer: TwistyPlayer): void {\n    if (this.twistyPlayer) {\n      console.warn(\"twisty-player reassignment is not supported\");\n      return;\n    }\n    this.twistyPlayer = twistyPlayer;\n    const sourceAlg = this.twistyPlayer.alg;\n    // TODO: Use proper architecture instead of a heuristic to ensure we have a parsed alg annotated with char indices.\n    const parsedAlg =\n      \"charIndex\" in (sourceAlg as Partial<Parsed<Alg>>)\n        ? sourceAlg\n        : Alg.fromString(sourceAlg.toString());\n    this.setAlg(parsedAlg);\n    (async () => {\n      const wrapper = new KPuzzleWrapper(\n        await puzzles[twistyPlayer!.puzzle].def(),\n      );\n      const indexer = new TreeAlgIndexer(wrapper, parsedAlg);\n      twistyPlayer.timeline.addTimestampListener({\n        onTimelineTimestampChange: (timestamp: MillisecondTimestamp): void => {\n          // TODO: improve perf, e.g. only get notified when the move index changes.\n          this.highlighter.set(\n            indexer.getMove(\n              indexer.timestampToIndex(timestamp),\n            ) as Parsed<Move> | null,\n          );\n        },\n        onTimeRangeChange(_timeRange: TimeRange): void {},\n      });\n    })();\n    twistyPlayer.timeline.addTimestampListener({\n      onTimelineTimestampChange: (timestamp: MillisecondTimestamp) => {\n        if (timestamp !== this.lastClickTimestamp) {\n          this.lastClickTimestamp = null;\n        }\n        const index =\n          this.twistyPlayer?.cursor?.experimentalIndexFromTimestamp(\n            timestamp,\n          ) ?? null;\n        if (index !== null) {\n          // console.log(index);\n          // console.log(this.#domTree.pathToIndex(index));\n        }\n      },\n      onTimeRangeChange: (_timeRange: TimeRange) => {\n        // TODO\n      },\n    });\n  }\n\n  jumpToIndex(index: number, offsetIntoMove: boolean): void {\n    if (this.twistyPlayer && this.twistyPlayer.cursor) {\n      const offset = offsetIntoMove ? DEFAULT_OFFSET_MS : 0;\n      const timestamp =\n        (this.twistyPlayer.cursor.experimentalTimestampFromIndex(index) ??\n          -offset) + offset;\n      this.twistyPlayer?.timeline.setTimestamp(timestamp);\n      if (this.lastClickTimestamp === timestamp) {\n        this.twistyPlayer.timeline.play();\n        this.lastClickTimestamp = null;\n      } else {\n        this.lastClickTimestamp = timestamp;\n      }\n    }\n  }\n\n  protected attributeChangedCallback(\n    attributeName: string,\n    _oldValue: string,\n    newValue: string,\n  ): void {\n    if (attributeName === \"for\") {\n      const elem = document.getElementById(newValue);\n      if (!elem) {\n        console.warn(\"for= elem does not exist\");\n        return;\n      }\n      if (!(elem instanceof TwistyPlayer)) {\n        console.warn(\"for= elem is not a twisty-player\");\n        return;\n      }\n      this.setTwistyPlayer(elem);\n    }\n  }\n\n  static get observedAttributes(): string[] {\n    return [\"for\"];\n  }\n}\n\ncustomElementsShim.define(\n  \"experimental-twisty-alg-viewer\",\n  ExperimentalTwistyAlgViewer,\n);\n"],"names":["DEFAULT_OFFSET_MS","DataDown","DataUp","TwistyAlgLeafElem","HTMLElementShim","constructor","className","text","dataDown","algOrUnit","offsetIntoMove","textContent","classList","add","addEventListener","twistyAlgViewer","jumpToIndex","earliestMoveIndex","pathToIndex","_index","customElementsShim","define","TwistyAlgWrapperElem","addString","str","queue","push","document","createTextNode","addElem","dataUp","element","moveCount","flushQueue","direction","ExperimentalIterationDirection","Forwards","node","maybeReverseList","append","oppositeDirection","Backwards","updateDirectionByAmount","currentDirection","amount","l","copy","Array","from","reverse","AlgToDOMTree","TraversalDownUp","traverseAlg","alg","first","unit","units","traverseUnit","traverseGrouping","grouping","experimentalEffectiveAmount","experimentalAlg","experimentalRepetitionSuffix","Math","abs","traverseMove","move","toString","highlighter","addMove","charIndex","traverseCommutator","commutator","second","A","B","traverseConjugate","conjugate","aLen","traversePause","pause","traverseNewline","newline","_dataDown","createElement","traverseLineComment","lineComment","algToDOMTreeInstance","algToDOMTree","bind","MoveHighlighter","Map","elem","moveCharIndexMap","set","newElem","get","currentElem","remove","ExperimentalTwistyAlgViewer","options","twistyPlayer","setTwistyPlayer","connectedCallback","setAlg","appendChild","console","warn","sourceAlg","parsedAlg","Alg","fromString","wrapper","KPuzzleWrapper","puzzles","puzzle","def","indexer","TreeAlgIndexer","timeline","addTimestampListener","onTimelineTimestampChange","timestamp","getMove","timestampToIndex","onTimeRangeChange","_timeRange","lastClickTimestamp","index","cursor","experimentalIndexFromTimestamp","offset","experimentalTimestampFromIndex","setTimestamp","play","attributeChangedCallback","attributeName","_oldValue","newValue","getElementById","TwistyPlayer","observedAttributes"],"version":3,"file":"index.344d082b.js.map"}