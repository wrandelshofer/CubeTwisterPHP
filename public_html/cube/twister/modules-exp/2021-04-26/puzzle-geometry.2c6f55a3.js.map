{"mappings":"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","sources":["./src/cubing/alg/index.ts","./src/cubing/alg/Alg.ts","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/classPrivateFieldGet.js","node_modules/@babel/runtime/helpers/classPrivateFieldSet.js","./src/cubing/alg/common.ts","./src/cubing/alg/is.ts","./src/cubing/alg/units/index.ts","./src/cubing/alg/units/containers/Grouping.ts","./src/cubing/alg/iteration.ts","./src/cubing/alg/units/Repetition.ts","node_modules/@babel/runtime/helpers/defineProperty.js","./src/cubing/alg/limits.ts","./src/cubing/alg/units/leaves/LineComment.ts","./src/cubing/alg/units/containers/Commutator.ts","./src/cubing/alg/units/containers/Conjugate.ts","./src/cubing/alg/units/leaves/Move.ts","./src/cubing/alg/parse.ts","./src/cubing/alg/AlgBuilder.ts","./src/cubing/alg/units/leaves/Newline.ts","./src/cubing/alg/units/leaves/Pause.ts","./src/cubing/alg/warnOnce.ts","./src/cubing/alg/traversal.ts","./src/cubing/alg/example.ts","./src/cubing/alg/keyboard.ts","./src/cubing/alg/url.ts","./src/cubing/alg/operation.ts"],"sourcesContent":["export { Alg } from \"./Alg\";\nexport { AlgBuilder } from \"./AlgBuilder\";\nexport { TraversalDownUp, TraversalUp } from \"./traversal\";\nexport { Example } from \"./example\";\nexport { keyToMove } from \"./keyboard\";\nexport * from \"./units\";\n\nexport { algCubingNetLink, AlgCubingNetOptions } from \"./url\";\n\nexport { experimentalAppendMove } from \"./operation\";\nexport { experimentalIs } from \"./is\";\nexport {\n  directedGenerator as experimentalDirectedGenerator,\n  direct as experimentalDirect,\n  IterationDirection as ExperimentalIterationDirection,\n} from \"./iteration\";\n","import { AlgCommon, Comparable } from \"./common\";\nimport { experimentalIs, experimentalIsUnit } from \"./is\";\nimport { direct, IterationDirection, reverse } from \"./iteration\";\nimport { parseAlg } from \"./parse\";\nimport { SimplifyOptions, simplify } from \"./traversal\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\nimport { LeafUnit, Unit } from \"./units/Unit\";\nimport { warnOnce } from \"./warnOnce\";\n\nexport type FlexibleAlgSource = string | Iterable<Unit> | Alg;\n\n// TODO: validate\nfunction toIterable(input?: FlexibleAlgSource): Iterable<Unit> {\n  if (!input) {\n    return [];\n  }\n\n  if (experimentalIs(input, Alg)) {\n    return (input as Alg).units();\n  }\n\n  if (typeof input === \"string\") {\n    return parseAlg(input).units(); // TODO: something more direct?\n  }\n\n  // const seq = inputUnits as Sequence;\n  // if (seq.type === \"sequence\" && seq.nestedUnits) {\n  //   throw new Error(\"unimplemented\");\n  //   // return seq.nestedUnits;\n  // }\n\n  const iter = input as Iterable<Unit>;\n  if (typeof iter[Symbol.iterator] === \"function\") {\n    return iter; // TODO: avoid allocations\n  }\n\n  throw \"Invalid unit\";\n}\n\n// Preserves the alg if it's already an `Alg`.\nexport function experimentalEnsureAlg(alg: FlexibleAlgSource): Alg {\n  if (experimentalIs(alg, Alg)) {\n    return alg as Alg;\n  }\n  return new Alg(alg);\n}\n\nexport class Alg extends AlgCommon<Alg> {\n  #units: Iterable<Unit>; // TODO: freeze?\n  constructor(alg?: FlexibleAlgSource) {\n    super();\n    this.#units = Array.from(toIterable(alg)); // TODO: can we avoid array-casting?\n\n    for (const unit of this.#units) {\n      if (!experimentalIsUnit(unit)) {\n        throw new Error(\"An alg can only contain units.\");\n      }\n    }\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsAlg = other as Alg;\n    if (!other.is(Alg)) {\n      return false;\n    }\n\n    // TODO: avoid converting to array\n    const l1 = Array.from(this.#units);\n    const l2 = Array.from(otherAsAlg.#units);\n    if (l1.length !== l2.length) {\n      return false;\n    }\n    for (let i = 0; i < l1.length; i++) {\n      if (!l1[i].isIdentical(l2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  invert(): Alg {\n    // TODO: Handle newLines and comments correctly\n    // TODO: Make more efficient.\n    return new Alg(reverse(Array.from(this.#units).map((u) => u.invert())));\n  }\n\n  /** @deprecated */\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    for (const unit of direct(this.#units, iterDir)) {\n      yield* unit.experimentalExpand(iterDir, depth);\n    }\n  }\n\n  expand(options?: { depth?: number }): Alg {\n    return new Alg(\n      this.experimentalExpand(\n        IterationDirection.Forwards,\n        options?.depth ?? Infinity,\n      ),\n    );\n  }\n\n  /** @deprecated */\n  *experimentalLeafMoves(): Generator<Move> {\n    for (const leaf of this.experimentalExpand()) {\n      if (leaf.is(Move)) {\n        yield leaf as Move;\n      }\n    }\n  }\n\n  concat(input: FlexibleAlgSource): Alg {\n    return new Alg(\n      Array.from(this.#units).concat(Array.from(toIterable(input))),\n    );\n  }\n\n  /** @deprecated */\n  experimentalIsEmpty(): boolean {\n    for (const _ of this.#units) {\n      return false;\n    }\n    return true;\n  }\n\n  static fromString(s: string): Alg {\n    return parseAlg(s);\n  }\n\n  *units(): Generator<Unit> {\n    for (const unit of this.#units) {\n      yield unit;\n    }\n  }\n\n  experimentalNumUnits(): number {\n    return Array.from(this.#units).length;\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"sequence\";\n  }\n\n  // toJSON(): AlgJSON {\n  //   return {\n  //     type: \"alg\",\n  //     units: Array.from(this.#units) as UnitJSON[],\n  //   };\n  // }\n\n  toString(): string {\n    let output = \"\";\n    let previousUnit: Unit | null = null;\n    for (const unit of this.#units) {\n      if (previousUnit) {\n        output += spaceBetween(previousUnit, unit);\n        // console.log(\"l\", previousUnit.toString(), unit.toString(), output);\n      }\n      output += unit.toString();\n      previousUnit = unit;\n    }\n    return output;\n  }\n\n  // *experimentalExpand(options: ExperimentalExpandOptions): Generator<Unit> {\n  //   // if (options.depth === 0) {\n  //   //   yield* this.units();\n  //   //   return;\n  //   // }\n  //   // const newOptions = {\n  //   //   depth: options.depth ? options.depth - 1 : null,\n  //   // }; // TODO: avoid allocations?\n  //   // for (const unit of this.#units) {\n  //   //   yield* unit.experimentalExpandIntoAlg(newOptions);\n  //   // }\n  // }\n\n  simplify(options?: SimplifyOptions): Alg {\n    return new Alg(simplify(this, options ?? {}));\n  }\n}\n\nfunction spaceBetween(u1: Unit, u2: Unit): string {\n  if (u1.is(Pause) && u2.is(Pause)) {\n    return \"\";\n  }\n  if (u1.is(Newline) || u2.is(Newline)) {\n    return \"\";\n  }\n  if (u1.is(LineComment) && !u2.is(Newline)) {\n    return \"\\n\"; /// TODO\n  }\n  return \" \";\n}\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classPrivateFieldGet;","function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet;","import { Alg } from \"./Alg\";\nimport { IterationDirection } from \"./iteration\";\nimport { LeafUnit, Unit } from \"./units/Unit\";\n\nlet writeAlgDebugField = false;\nexport function setAlgDebugField(debug: boolean): void {\n  writeAlgDebugField = debug;\n}\n\nexport abstract class Comparable {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  is(c: any): boolean {\n    return this instanceof c;\n  }\n\n  abstract isIdentical(other: Comparable): boolean;\n}\n\nexport interface Repeatable extends Comparable {\n  experimentalExpand(\n    iterDir?: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit>;\n}\n\n// Common to algs or units\nexport abstract class AlgCommon<T extends Alg | Unit>\n  extends Comparable\n  implements Repeatable {\n  constructor() {\n    super();\n    if (writeAlgDebugField) {\n      Object.defineProperty(this, \"_debugStr\", {\n        get: function () {\n          return this.toString();\n        },\n      });\n    }\n  }\n\n  abstract toString(): string;\n\n  abstract invert(): T;\n\n  abstract experimentalExpand(iterDir: IterationDirection): Generator<LeafUnit>;\n}\n","import { Alg } from \"./Alg\";\nimport {\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n} from \"./units\";\n\nexport function experimentalIs(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  v: any,\n  c:\n    | typeof Alg\n    | typeof Grouping\n    | typeof LineComment\n    | typeof Commutator\n    | typeof Conjugate\n    | typeof Move\n    | typeof Newline\n    | typeof Pause,\n): boolean {\n  return v instanceof c;\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function experimentalIsUnit(v: any): boolean {\n  return (\n    experimentalIs(v, Grouping) ||\n    experimentalIs(v, LineComment) ||\n    experimentalIs(v, Commutator) ||\n    experimentalIs(v, Conjugate) ||\n    experimentalIs(v, Move) ||\n    experimentalIs(v, Newline) ||\n    experimentalIs(v, Pause)\n  );\n}\n","export { Grouping } from \"./containers/Grouping\";\nexport { LineComment } from \"./leaves/LineComment\";\nexport { Commutator } from \"./containers/Commutator\";\nexport { Conjugate } from \"./containers/Conjugate\";\nexport { Move, QuantumMove } from \"./leaves/Move\";\nexport { Newline } from \"./leaves/Newline\";\nexport { Pause } from \"./leaves/Pause\";\nexport { Unit } from \"./Unit\";\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { Repetition, RepetitionInfo } from \"../Repetition\";\nimport { LeafUnit } from \"../Unit\";\n\nexport class Grouping extends AlgCommon<Grouping> {\n  readonly #repetition: Repetition<Alg>;\n\n  constructor(algSource: FlexibleAlgSource, repetitionInfo?: RepetitionInfo) {\n    super();\n    const alg = experimentalEnsureAlg(algSource);\n    this.#repetition = new Repetition(alg, repetitionInfo);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsGrouping = other as Grouping;\n    return (\n      other.is(Grouping) &&\n      this.#repetition.isIdentical(otherAsGrouping.#repetition)\n    );\n  }\n\n  /** @deprecated */\n  get experimentalAlg(): Alg {\n    return this.#repetition.quantum;\n  }\n\n  /** @deprecated */\n  get experimentalEffectiveAmount(): number {\n    return this.#repetition.experimentalEffectiveAmount();\n  }\n\n  /** @deprecated */\n  get experimentalRepetitionSuffix(): string {\n    return this.#repetition.suffix();\n  }\n\n  invert(): Grouping {\n    return new Grouping(\n      this.#repetition.quantum,\n      this.#repetition.inverseInfo(),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.#repetition.experimentalExpand(iterDir, depth - 1);\n    }\n  }\n\n  static fromString(): Grouping {\n    throw new Error(\"unimplemented\");\n  }\n\n  toString(): string {\n    return `(${this.#repetition.quantum.toString()})${this.#repetition.suffix()}`;\n  }\n\n  // toJSON(): GroupingJSON {\n  //   return {\n  //     type: \"grouping\",\n  //     alg: this.#quanta.quantum.toJSON(),\n  //   };\n  // }\n}\n","export enum IterationDirection {\n  Forwards = 1,\n  Backwards = -1,\n}\n\nexport function toggleDirection(\n  iterationDirection: IterationDirection,\n  flip: boolean = true,\n): IterationDirection {\n  if (!flip) {\n    return iterationDirection;\n  }\n  switch (iterationDirection) {\n    case IterationDirection.Forwards:\n      return IterationDirection.Backwards;\n    case IterationDirection.Backwards:\n      return IterationDirection.Forwards;\n  }\n}\n\nexport function direct<T>(\n  g: Iterable<T>,\n  iterDir: IterationDirection,\n): Iterable<T> {\n  return iterDir === IterationDirection.Backwards ? Array.from(g).reverse() : g;\n}\n\nexport function reverse<T>(g: Iterable<T>): Iterable<T> {\n  return Array.from(g).reverse();\n}\n\nexport function* directedGenerator<T>(\n  g: Generator<T>,\n  direction: IterationDirection,\n): Generator<T> {\n  return direction === IterationDirection.Backwards\n    ? yield* reverseGenerator(g)\n    : yield* g;\n}\n\nexport function* reverseGenerator<T>(g: Generator<T>): Generator<T> {\n  for (const t of Array.from(g).reverse()) {\n    yield t;\n  }\n}\n","import { Repeatable } from \"../common\";\nimport { IterationDirection, toggleDirection } from \"../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION } from \"../limits\";\nimport { LeafUnit } from \"./Unit\";\n\nexport type RepetitionInfo =\n  | undefined\n  | number\n  | null\n  | [/* absolute amount */ number | null, /* prime */ boolean];\n\nexport class Repetition<Q extends Repeatable> {\n  readonly quantum: Q;\n  readonly absAmount: number | null = null;\n  readonly prime: boolean = false;\n\n  constructor(quantum: Q, repetitionInfo?: RepetitionInfo) {\n    this.quantum = quantum;\n    if (typeof repetitionInfo === \"undefined\" || repetitionInfo === null) {\n      // nothing\n    } else if (typeof repetitionInfo === \"number\") {\n      this.absAmount =\n        repetitionInfo === null ? null : Math.abs(repetitionInfo);\n      this.prime = repetitionInfo === null ? false : repetitionInfo < 0;\n      return;\n    } else if (repetitionInfo instanceof Array) {\n      this.absAmount = repetitionInfo[0] === null ? null : repetitionInfo[0];\n      this.prime = repetitionInfo[1];\n    } else {\n      throw new Error(\"invalid repetition\");\n    }\n\n    if (this.absAmount !== null) {\n      if (\n        !Number.isInteger(this.absAmount) ||\n        this.absAmount! < 0 ||\n        this.absAmount > MAX_INT\n      ) {\n        throw new Error(\n          `Unit amount absolute value must be a non-negative integer no larger than ${MAX_INT_DESCRIPTION}.`,\n        );\n      }\n    }\n\n    if (this.prime !== false && this.prime !== true) {\n      throw new Error(\"Invalid prime boolean.\");\n    }\n  }\n\n  /** @deprecated */\n  experimentalEffectiveAmount(): number {\n    return (this.absAmount ?? 1) * (this.prime ? -1 : 1);\n  }\n\n  suffix(): string {\n    let s: string = \"\";\n    // TODO\n    if (this.absAmount !== null && this.absAmount !== 1) {\n      s += this.absAmount;\n    }\n    if (this.prime) {\n      s += \"'\";\n    }\n    return s;\n  }\n\n  isIdentical(other: Repetition<Q>): boolean {\n    return (\n      this.quantum.isIdentical(other.quantum) &&\n      (this.absAmount ?? 1) === (other.absAmount ?? 1) && // TODO\n      this.prime === other.prime\n    );\n  }\n\n  info(): RepetitionInfo {\n    return [this.absAmount, this.prime];\n  }\n\n  inverseInfo(): RepetitionInfo {\n    return [this.absAmount, !this.prime];\n  }\n\n  // TODO: `Conjugate` and `Commutator` decrement `depth` inside the quantum, `Grouping` has to do it outside the quantum.\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth: number,\n  ): Generator<LeafUnit> {\n    const absAmount = this.absAmount ?? 1;\n    const newIterDir = toggleDirection(iterDir, this.prime);\n    for (let i = 0; i < absAmount; i++) {\n      yield* this.quantum.experimentalExpand(newIterDir, depth);\n    }\n  }\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export const MAX_INT = 0x7fffffff; // 2^32-1, the max value for signed 32-bit ints.\nexport const MAX_INT_DESCRIPTION = \"2^32 - 1\";\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { LeafUnit } from \"../Unit\";\n\n// TODO: hash\n// TODO: this conflicts with the HTML `LineComment` class\nexport class LineComment extends AlgCommon<LineComment> {\n  readonly #text: string;\n\n  constructor(commentText: string) {\n    super();\n    if (commentText.includes(\"\\n\") || commentText.includes(\"\\r\")) {\n      throw new Error(\"LineComment cannot contain newline\");\n    }\n    this.#text = commentText;\n  }\n\n  get text(): string {\n    return this.#text;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsLineComment = other as LineComment;\n    return other.is(LineComment) && this.#text === otherAsLineComment.#text;\n  }\n\n  invert(): LineComment {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n\n  toString(): string {\n    return `//${this.#text}`;\n  }\n\n  // toJSON(): LineCommentJSON {\n  //   return {\n  //     type: \"comment\",\n  //     text: this.#text,\n  //   };\n  // }\n}\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { Repetition, RepetitionInfo } from \"../Repetition\";\nimport { LeafUnit } from \"../Unit\";\n\nexport class QuantumCommutator extends Comparable {\n  constructor(public A: Alg, public B: Alg) {\n    super();\n    Object.freeze(this);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsQuantumCommutator = other as QuantumCommutator;\n    return (\n      other.is(QuantumCommutator) &&\n      this.A.isIdentical(otherAsQuantumCommutator.A) &&\n      this.B.isIdentical(otherAsQuantumCommutator.B)\n    );\n  }\n\n  toString(): string {\n    return `[${this.A}, ${this.B}]`;\n  }\n\n  // TODO: use a common composite iterator helper.\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth: number, // TODO\n  ): Generator<LeafUnit> {\n    if (depth === 0) {\n      throw new Error(\"cannot expand depth 0 for a quantum\");\n    }\n\n    if (iterDir === IterationDirection.Forwards) {\n      yield* this.A.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.B.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.A.experimentalExpand(IterationDirection.Backwards, depth - 1);\n      yield* this.B.experimentalExpand(IterationDirection.Backwards, depth - 1);\n    } else {\n      yield* this.B.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.A.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.B.experimentalExpand(IterationDirection.Backwards, depth - 1);\n      yield* this.A.experimentalExpand(IterationDirection.Backwards, depth - 1);\n    }\n  }\n}\n\nexport class Commutator extends AlgCommon<Commutator> {\n  readonly #repetition: Repetition<QuantumCommutator>;\n\n  constructor(\n    aSource: FlexibleAlgSource,\n    bSource: FlexibleAlgSource,\n    repetitionInfo?: RepetitionInfo,\n  ) {\n    super();\n    this.#repetition = new Repetition<QuantumCommutator>(\n      new QuantumCommutator(\n        experimentalEnsureAlg(aSource),\n        experimentalEnsureAlg(bSource),\n      ), // TODO\n      repetitionInfo,\n    );\n  }\n\n  get A(): Alg {\n    return this.#repetition.quantum.A;\n  }\n\n  get B(): Alg {\n    return this.#repetition.quantum.B;\n  }\n\n  /** @deprecated */\n  get experimentalEffectiveAmount(): number {\n    return this.#repetition.experimentalEffectiveAmount();\n  }\n\n  /** @deprecated */\n  get experimentalRepetitionSuffix(): string {\n    return this.#repetition.suffix();\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsCommutator = other as Commutator;\n    return (\n      other.is(Commutator) &&\n      this.#repetition.isIdentical(otherAsCommutator.#repetition)\n    );\n  }\n\n  invert(): Commutator {\n    return new Commutator(\n      this.#repetition.quantum.B,\n      this.#repetition.quantum.A,\n      this.#repetition.info(),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.#repetition.experimentalExpand(iterDir, depth);\n    }\n  }\n\n  toString(): string {\n    return `${this.#repetition.quantum.toString()}${this.#repetition.suffix()}`;\n  }\n\n  // toJSON(): CommutatorJSON {\n  //   return {\n  //     type: \"commutator\",\n  //     A: this.#quanta.quantum.A.toJSON(),\n  //     B: this.#quanta.quantum.B.toJSON(),\n  //     amount: this.a\n  //   };\n  // }\n}\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { Repetition, RepetitionInfo } from \"../Repetition\";\nimport { LeafUnit } from \"../Unit\";\n\nexport class QuantumCommutator extends Comparable {\n  constructor(public A: Alg, public B: Alg) {\n    super();\n    Object.freeze(this);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsQuantumCommutator = other as QuantumCommutator;\n    return (\n      other.is(QuantumCommutator) &&\n      this.A.isIdentical(otherAsQuantumCommutator.A) &&\n      this.B.isIdentical(otherAsQuantumCommutator.B)\n    );\n  }\n\n  // TODO: use a common composite iterator helper.\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth: number,\n  ): Generator<LeafUnit> {\n    if (depth === 0) {\n      throw new Error(\"cannot expand depth 0 for a quantum\");\n    }\n\n    yield* this.A.experimentalExpand(IterationDirection.Forwards, depth - 1);\n    yield* this.B.experimentalExpand(iterDir, depth - 1);\n    yield* this.A.experimentalExpand(IterationDirection.Backwards, depth - 1);\n  }\n\n  toString(): string {\n    return `[${this.A}: ${this.B}]`;\n  }\n}\n\nexport class Conjugate extends AlgCommon<Conjugate> {\n  readonly #repetition: Repetition<QuantumCommutator>;\n\n  constructor(\n    aSource: FlexibleAlgSource,\n    bSource: FlexibleAlgSource,\n    repetitionInfo?: RepetitionInfo,\n  ) {\n    super();\n    this.#repetition = new Repetition<QuantumCommutator>(\n      new QuantumCommutator(\n        experimentalEnsureAlg(aSource),\n        experimentalEnsureAlg(bSource),\n      ), // TODO\n      repetitionInfo,\n    );\n  }\n\n  get A(): Alg {\n    return this.#repetition.quantum.A;\n  }\n\n  get B(): Alg {\n    return this.#repetition.quantum.B;\n  }\n\n  /** @deprecated */\n  get experimentalEffectiveAmount(): number {\n    return this.#repetition.experimentalEffectiveAmount();\n  }\n\n  /** @deprecated */\n  get experimentalRepetitionSuffix(): string {\n    return this.#repetition.suffix();\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsConjugate = other as Conjugate;\n    return (\n      other.is(Conjugate) &&\n      this.#repetition.isIdentical(otherAsConjugate.#repetition)\n    );\n  }\n\n  invert(): Conjugate {\n    return new Conjugate(\n      this.#repetition.quantum.A,\n      this.#repetition.quantum.B.invert(),\n      this.#repetition.info(),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.#repetition.experimentalExpand(iterDir, depth);\n    }\n  }\n\n  toString(): string {\n    return `${this.#repetition.quantum.toString()}${this.#repetition.suffix()}`;\n  }\n\n  // toJSON(): ConjugateJSON {\n  //   return {\n  //     type: \"conjugate\",\n  //     A: this.#quanta.quantum.A.toJSON(),\n  //     B: this.#quanta.quantum.B.toJSON(),\n  //     amount: this.a\n  //   };\n  // }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION } from \"../../limits\";\nimport { parseMove, parseQuantumMove, transferCharIndex } from \"../../parse\";\nimport { warnOnce } from \"../../warnOnce\";\nimport { Repetition, RepetitionInfo } from \"../Repetition\";\nimport { LeafUnit } from \"../Unit\";\n\ninterface QuantumMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n}\n\nexport class QuantumMove extends Comparable {\n  readonly #family: string;\n  readonly #innerLayer: number | null;\n  readonly #outerLayer: number | null;\n\n  constructor(\n    family: string,\n    innerLayer?: number | null,\n    outerLayer?: number | null,\n  ) {\n    super();\n    this.#family = family;\n    this.#innerLayer = innerLayer ?? null;\n    this.#outerLayer = outerLayer ?? null;\n    Object.freeze(this);\n\n    if (\n      this.#innerLayer !== null &&\n      (!Number.isInteger(this.#innerLayer) ||\n        this.#innerLayer! < 1 ||\n        this.#innerLayer! > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove inner layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      (!Number.isInteger(this.#outerLayer) ||\n        this.#outerLayer < 1 ||\n        this.#outerLayer > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove outer layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      this.#innerLayer !== null &&\n      this.#innerLayer! <= this.#outerLayer!\n    ) {\n      throw new Error(\n        \"QuantumMove outer layer must be smaller than inner layer.\",\n      );\n    }\n\n    if (this.#outerLayer !== null && this.#innerLayer === null) {\n      throw new Error(\n        \"QuantumMove with an outer layer must have an inner layer\",\n      ); // TODO: test\n    }\n  }\n\n  static fromString(s: string): QuantumMove {\n    return parseQuantumMove(s);\n  }\n\n  modified(modifications: QuantumMoveModifications): QuantumMove {\n    return new QuantumMove(\n      modifications.family ?? this.#family,\n      modifications.innerLayer ?? this.#innerLayer,\n      modifications.outerLayer ?? this.#outerLayer,\n    );\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsQuantumMove = other as QuantumMove;\n    return (\n      other.is(QuantumMove) &&\n      this.#family === otherAsQuantumMove.#family &&\n      this.#innerLayer === otherAsQuantumMove.#innerLayer &&\n      this.#outerLayer === otherAsQuantumMove.#outerLayer\n    );\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get family(): string {\n    return this.#family;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get outerLayer(): number | null {\n    return this.#outerLayer;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get innerLayer(): number | null {\n    return this.#innerLayer;\n  }\n\n  experimentalExpand(): Generator<LeafUnit> {\n    throw new Error(\n      \"experimentalExpand() cannot be called on a `QuantumMove` directly.\",\n    );\n  }\n\n  toString(): string {\n    let s = this.#family;\n    if (this.#innerLayer !== null) {\n      s = String(this.#innerLayer) + s;\n      if (this.#outerLayer !== null) {\n        s = String(this.#outerLayer) + \"-\" + s;\n      }\n    }\n    return s;\n  }\n}\n\ninterface MoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  repetition?: RepetitionInfo;\n}\n\nexport class Move extends AlgCommon<Move> {\n  readonly #repetition: Repetition<QuantumMove>;\n\n  constructor(\n    ...args:\n      | [QuantumMove]\n      | [QuantumMove, RepetitionInfo]\n      | [string]\n      | [string, RepetitionInfo]\n  ) {\n    super();\n    if (typeof args[0] === \"string\") {\n      if (args[1] ?? null) {\n        this.#repetition = new Repetition(\n          QuantumMove.fromString(args[0]),\n          args[1],\n        );\n        return;\n      } else {\n        return Move.fromString(args[0]); // TODO: can we return here?\n      }\n    }\n    this.#repetition = new Repetition<QuantumMove>(args[0], args[1]);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsMove = other as Move;\n    return (\n      other.is(Move) && this.#repetition.isIdentical(otherAsMove.#repetition)\n    );\n  }\n\n  invert(): Move {\n    // TODO: handle char indices more consistently among units.\n    return transferCharIndex(\n      this,\n      new Move(this.#repetition.quantum, this.#repetition.inverseInfo()),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n  ): Generator<LeafUnit> {\n    if (iterDir === IterationDirection.Forwards) {\n      yield this;\n    } else {\n      yield this.modified({ repetition: this.#repetition.inverseInfo() });\n    }\n  }\n\n  get quantum(): QuantumMove {\n    return this.#repetition.quantum;\n  }\n\n  equals(other: Move): boolean {\n    return (\n      this.quantum.isIdentical(other.quantum) &&\n      this.#repetition.isIdentical(other.#repetition)\n    );\n  }\n\n  modified(modifications: MoveModifications): Move {\n    return new Move(\n      this.#repetition.quantum.modified(modifications),\n      modifications.repetition ?? this.#repetition.info(),\n    );\n  }\n\n  static fromString(s: string): Move {\n    return parseMove(s);\n  }\n\n  /** @deprecated */\n  get effectiveAmount(): number {\n    return (\n      (this.#repetition.absAmount ?? 1) * (this.#repetition.prime ? -1 : 1)\n    );\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"blockMove\";\n  }\n\n  /** @deprecated */\n  get family(): string {\n    return this.#repetition.quantum.family ?? undefined;\n  }\n\n  /** @deprecated */\n  get outerLayer(): number | undefined {\n    return this.#repetition.quantum.outerLayer ?? undefined;\n  }\n\n  /** @deprecated */\n  get innerLayer(): number | undefined {\n    return this.#repetition.quantum.innerLayer ?? undefined;\n  }\n\n  toString(): string {\n    return this.#repetition.quantum.toString() + this.#repetition.suffix();\n  }\n\n  // // TODO: Serialize as a string?\n  // toJSON(): MoveJSON {\n  //   return {\n  //     type: \"move\",\n  //     family: this.family,\n  //     innerLayer: this.innerLayer,\n  //     outerLayer: this.outerLayer,\n  //   };\n  // }\n}\n","import { Alg } from \"./Alg\";\nimport { AlgBuilder } from \"./AlgBuilder\";\nimport { Unit } from \"./units\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\nimport { RepetitionInfo } from \"./units/Repetition\";\n\ntype StoppingChar = \",\" | \":\" | \"]\" | \")\";\n\nfunction parseIntWithEmptyFallback<T>(n: string, emptyFallback: T): number | T {\n  return n ? parseInt(n) : emptyFallback;\n}\n\nconst repetitionRegex = /^(\\d+)?('?)/;\nconst moveStartRegex = /^[_\\dA-Za-z]/;\nconst quantumMoveRegex = /^((([1-9]\\d*)-)?([1-9]\\d*))?([_A-Za-z]+)?/;\nconst commentTextRegex = /[^\\n]*/;\n\nexport function parseAlg(s: string): Alg {\n  return new AlgParser().parseAlg(s);\n}\n\nexport function parseMove(s: string): Move {\n  return new AlgParser().parseMove(s);\n}\n\nexport function parseQuantumMove(s: string): QuantumMove {\n  return new AlgParser().parseQuantumMove(s);\n}\n\nexport interface ParserIndexed {\n  charIndex: number;\n}\n\nexport type Parsed<T extends Alg | Unit> = T & ParserIndexed;\n\nfunction addCharIndex<T extends Alg | Unit>(\n  t: T,\n  charIndex: number,\n): Parsed<T> {\n  const parsedT = t as ParserIndexed & T;\n  parsedT.charIndex = charIndex;\n  return parsedT;\n}\n\nexport function transferCharIndex<T extends Alg | Unit>(from: T, to: T): T {\n  if (\"charIndex\" in from) {\n    (to as Parsed<T>).charIndex = (from as Parsed<T>).charIndex;\n  }\n  return to;\n}\n\n// TODO: support recording string locations for moves.\nclass AlgParser {\n  #input: string = \"\";\n  #idx: number = 0;\n\n  parseAlg(input: string): Parsed<Alg> {\n    this.#input = input;\n    this.#idx = 0;\n    const alg = this.parseAlgWithStopping([]);\n    this.mustBeAtEndOfInput();\n    return alg;\n  }\n\n  parseMove(input: string): Parsed<Move> {\n    this.#input = input;\n    this.#idx = 0;\n    const move = this.parseMoveImpl();\n    this.mustBeAtEndOfInput();\n    return move;\n  }\n\n  parseQuantumMove(input: string): QuantumMove {\n    this.#input = input;\n    this.#idx = 0;\n    const quantumMove = this.parseQuantumMoveImpl();\n    this.mustBeAtEndOfInput();\n    return quantumMove;\n  }\n\n  private mustBeAtEndOfInput() {\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"parsing unexpectedly ended early\");\n    }\n  }\n\n  private parseAlgWithStopping(stopBefore: StoppingChar[]): Parsed<Alg> {\n    const algStartIdx = this.#idx;\n    const algBuilder = new AlgBuilder();\n\n    // We're \"crowded\" if there was not a space or newline since the last unit.\n    let crowded = false;\n\n    const mustNotBeCrowded = (): void => {\n      if (crowded) {\n        throw new Error(\n          `Unexpected unit at idx ${this.#idx}. Are you missing a space?`,\n        ); // TODO better error message\n      }\n    };\n\n    mainLoop: while (this.#idx < this.#input.length) {\n      const savedCharIndex = this.#idx;\n      if ((stopBefore as string[]).includes(this.#input[this.#idx])) {\n        return addCharIndex(algBuilder.toAlg(), algStartIdx);\n      }\n      if (this.tryConsumeNext(\" \")) {\n        crowded = false;\n        continue mainLoop;\n      } else if (moveStartRegex.test(this.#input[this.#idx])) {\n        mustNotBeCrowded();\n        const move = this.parseMoveImpl();\n        algBuilder.push(move);\n        crowded = true;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"(\")) {\n        mustNotBeCrowded();\n        const alg = this.parseAlgWithStopping([\")\"]);\n        this.mustConsumeNext(\")\");\n        const repetitionInfo = this.parseRepetition();\n        algBuilder.push(\n          addCharIndex(new Grouping(alg, repetitionInfo), savedCharIndex),\n        );\n        crowded = true;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"[\")) {\n        mustNotBeCrowded();\n        const A = this.parseAlgWithStopping([\",\", \":\"]);\n        const separator = this.popNext();\n        const B = this.parseAlgWithStopping([\"]\"]);\n        this.mustConsumeNext(\"]\");\n        const repetitionInfo = this.parseRepetition();\n        switch (separator) {\n          case \":\":\n            algBuilder.push(\n              addCharIndex(new Conjugate(A, B, repetitionInfo), savedCharIndex),\n            );\n            crowded = true;\n            continue mainLoop;\n          case \",\":\n            algBuilder.push(\n              addCharIndex(\n                new Commutator(A, B, repetitionInfo),\n                savedCharIndex,\n              ),\n            );\n            crowded = true;\n            continue mainLoop;\n          default:\n            throw \"unexpected parsing error\";\n        }\n      } else if (this.tryConsumeNext(\"\\n\")) {\n        algBuilder.push(addCharIndex(new Newline(), savedCharIndex));\n        crowded = false;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"/\")) {\n        this.mustConsumeNext(\"/\");\n        const [text] = this.parseRegex(commentTextRegex);\n        algBuilder.push(addCharIndex(new LineComment(text), savedCharIndex));\n        crowded = false;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\".\")) {\n        mustNotBeCrowded();\n        algBuilder.push(addCharIndex(new Pause(), savedCharIndex));\n        while (this.tryConsumeNext(\".\")) {\n          algBuilder.push(addCharIndex(new Pause(), this.#idx - 1)); // TODO: Can we precompute index similarly to other units?\n        }\n        crowded = true;\n        continue mainLoop;\n      } else {\n        throw new Error(`Unexpected character: ${this.popNext()}`);\n      }\n    }\n\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"did not finish parsing?\");\n    }\n    if (stopBefore.length > 0) {\n      throw new Error(\"expected stopping\");\n    }\n    return addCharIndex(algBuilder.toAlg(), algStartIdx);\n  }\n\n  private parseQuantumMoveImpl(): QuantumMove {\n    const [, , , outerLayerStr, innerLayerStr, family] = this.parseRegex(\n      quantumMoveRegex,\n    );\n\n    return new QuantumMove(\n      family,\n      parseIntWithEmptyFallback(innerLayerStr, undefined),\n      parseIntWithEmptyFallback(outerLayerStr, undefined),\n    );\n  }\n\n  private parseMoveImpl(): Parsed<Move> {\n    const savedCharIndex = this.#idx;\n    const quantumMove = this.parseQuantumMoveImpl();\n    const repetitionInfo = this.parseRepetition();\n\n    const move = addCharIndex(\n      new Move(quantumMove, repetitionInfo),\n      savedCharIndex,\n    );\n    return move;\n  }\n\n  private parseRepetition(): RepetitionInfo {\n    const [, absAmountStr, primeStr] = this.parseRegex(repetitionRegex);\n    return [parseIntWithEmptyFallback(absAmountStr, null), primeStr === \"'\"];\n  }\n\n  private parseRegex(regex: RegExp): RegExpExecArray {\n    const arr = regex.exec(this.remaining());\n    if (arr === null) {\n      throw new Error(\"internal parsing error\"); // TODO\n    }\n    this.#idx += arr[0].length;\n    return arr;\n  }\n\n  private remaining(): string {\n    return this.#input.slice(this.#idx);\n  }\n\n  private popNext(): string {\n    const next = this.#input[this.#idx];\n    this.#idx++;\n    return next;\n  }\n\n  private tryConsumeNext(expected: string): boolean {\n    if (this.#input[this.#idx] === expected) {\n      this.#idx++;\n      return true;\n    }\n    return false;\n  }\n\n  private mustConsumeNext(expected: string): string {\n    const next = this.popNext();\n    if (next !== expected) {\n      throw new Error(\n        `expected \\`${expected}\\` while parsing, encountered ${next}`,\n      ); // TODO: be more helpful\n    }\n    return next;\n  }\n}\n","import { Alg } from \"./Alg\";\nimport { Unit } from \"./units/Unit\";\n\nexport class AlgBuilder {\n  #units: Unit[] = [];\n\n  push(u: Unit): void {\n    this.#units.push(u);\n  }\n\n  // TODO: can we guarantee this to be fast in the permanent API?\n  experimentalNumUnits(): number {\n    return this.#units.length;\n  }\n\n  // can be called multiple times, even if you push units inbetween.\n  toAlg(): Alg {\n    return new Alg(this.#units);\n  }\n\n  reset(): void {\n    this.#units = [];\n  }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { LeafUnit } from \"../Unit\";\n\nexport class Newline extends AlgCommon<Newline> {\n  toString(): string {\n    return `\\n`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Newline);\n  }\n\n  invert(): Newline {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { LeafUnit } from \"../Unit\";\n\nexport class Pause extends AlgCommon<Pause> {\n  toString(): string {\n    return `.`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Pause);\n  }\n\n  invert(): Pause {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n","const warned = new Set<string>();\nexport function warnOnce(s: string): void {\n  if (!warned.has(s)) {\n    console.warn(s);\n    warned.add(s);\n  }\n}\n","import { Alg } from \"./Alg\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport { Comparable } from \"./common\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Unit } from \"./units/Unit\";\n\nfunction dispatch<DataDown, DataAlgUp, DataUnitUp>(\n  t: TraversalDownUp<DataDown, DataAlgUp, DataUnitUp>,\n  unit: Unit,\n  dataDown: DataDown,\n): DataUnitUp {\n  // TODO: Can we turn this back into a `switch` or something more efficiently?\n  if (unit.is(Grouping)) {\n    return t.traverseGrouping(unit as Grouping, dataDown);\n  }\n  if (unit.is(Move)) {\n    return t.traverseMove(unit as Move, dataDown);\n  }\n  if (unit.is(Commutator)) {\n    return t.traverseCommutator(unit as Commutator, dataDown);\n  }\n  if (unit.is(Conjugate)) {\n    return t.traverseConjugate(unit as Conjugate, dataDown);\n  }\n  if (unit.is(Pause)) {\n    return t.traversePause(unit as Pause, dataDown);\n  }\n  if (unit.is(Newline)) {\n    return t.traverseNewline(unit as Newline, dataDown);\n  }\n  if (unit.is(LineComment)) {\n    return t.traverseLineComment(unit as LineComment, dataDown);\n  }\n  throw new Error(`unknown unit`);\n}\n\nfunction assertIsUnit(t: Comparable): Unit {\n  if (\n    t.is(Grouping) ||\n    t.is(Move) ||\n    t.is(Commutator) ||\n    t.is(Conjugate) ||\n    t.is(Pause) ||\n    t.is(Newline) ||\n    t.is(LineComment)\n  ) {\n    return t as Unit;\n  }\n  throw \"internal error: expected unit\"; // TODO: Make more helpful, add tests\n}\n\nexport abstract class TraversalDownUp<\n  DataDown,\n  DataAlgUp,\n  DataUnitUp = DataAlgUp\n> {\n  // Immediate subclasses should overwrite this.\n  public traverseUnit(unit: Unit, dataDown: DataDown): DataUnitUp {\n    return dispatch(this, unit, dataDown);\n  }\n\n  public traverseIntoUnit(unit: Unit, dataDown: DataDown): Unit {\n    return assertIsUnit(this.traverseUnit(unit, dataDown) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg, dataDown: DataDown): DataAlgUp;\n\n  public abstract traverseGrouping(\n    grouping: Grouping,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseMove(move: Move, dataDown: DataDown): DataUnitUp;\n\n  public abstract traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseConjugate(\n    conjugate: Conjugate,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traversePause(pause: Pause, dataDown: DataDown): DataUnitUp;\n  public abstract traverseNewline(\n    newline: Newline,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseLineComment(\n    comment: LineComment,\n    dataDown: DataDown,\n  ): DataUnitUp;\n}\n\nexport abstract class TraversalUp<\n  DataAlgUp,\n  DataUnitUp = DataAlgUp\n> extends TraversalDownUp<undefined, DataAlgUp, DataUnitUp> {\n  public traverseUnit(unit: Unit): DataUnitUp {\n    return dispatch<unknown, DataAlgUp, DataUnitUp>(this, unit, undefined);\n  }\n\n  public traverseIntoUnit(unit: Unit): Unit {\n    return assertIsUnit(this.traverseUnit(unit) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg): DataAlgUp;\n  public abstract traverseGrouping(grouping: Grouping): DataUnitUp;\n  public abstract traverseMove(move: Move): DataUnitUp;\n  public abstract traverseCommutator(commutator: Commutator): DataUnitUp;\n  public abstract traverseConjugate(conjugate: Conjugate): DataUnitUp;\n  public abstract traversePause(pause: Pause): DataUnitUp;\n  public abstract traverseNewline(newline: Newline): DataUnitUp;\n  public abstract traverseLineComment(comment: LineComment): DataUnitUp;\n}\n\nexport interface SimplifyOptions {\n  collapseMoves?: boolean;\n  quantumMoveOrder?: (quantumMove: QuantumMove) => number;\n  depth?: number | null; // TODO: test\n}\n\n// TODO: Test that inverses are bijections.\nclass Simplify extends TraversalDownUp<SimplifyOptions, Generator<Unit>> {\n  // TODO: Handle\n  public *traverseAlg(alg: Alg, options: SimplifyOptions): Generator<Unit> {\n    if (options.depth === 0) {\n      yield* alg.units();\n      return;\n    }\n\n    const newUnits: Unit[] = [];\n    let lastUnit: Unit | null = null;\n    const collapseMoves = options?.collapseMoves ?? true;\n    function appendCollapsed(newUnit: Unit) {\n      if (collapseMoves && lastUnit?.is(Move) && newUnit.is(Move)) {\n        const lastMove = lastUnit as Move;\n        const newMove = newUnit as Move;\n        if (lastMove.quantum.isIdentical(newMove.quantum)) {\n          newUnits.pop();\n          let newAmount = lastMove.effectiveAmount + newMove.effectiveAmount;\n          if (options?.quantumMoveOrder) {\n            const order = options.quantumMoveOrder(lastMove.quantum);\n            newAmount = (((newAmount % order) + order + 1) % order) - 1; // TODO\n          }\n          if (newAmount !== 0) {\n            const coalescedMove = new Move(lastMove.quantum, newAmount);\n            newUnits.push(coalescedMove);\n            lastUnit = coalescedMove;\n          } else {\n            lastUnit = newUnits.slice(-1)[0];\n          }\n        } else {\n          // TODO: handle quantum move order\n          newUnits.push(newUnit);\n          lastUnit = newUnit;\n        }\n      } else {\n        // TODO: handle quantum move order\n        newUnits.push(newUnit);\n        lastUnit = newUnit;\n      }\n    }\n\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    for (const unit of alg.units()) {\n      for (const ancestorUnit of this.traverseUnit(unit, newOptions)) {\n        appendCollapsed(ancestorUnit);\n      }\n    }\n    for (const unit of newUnits) {\n      yield unit;\n    }\n  }\n\n  public *traverseGrouping(\n    grouping: Grouping,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield grouping;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Grouping(this.traverseAlg(grouping.experimentalAlg, newOptions));\n  }\n\n  public *traverseMove(move: Move, _options: SimplifyOptions): Generator<Unit> {\n    yield move;\n  }\n\n  public *traverseCommutator(\n    commutator: Commutator,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield commutator;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Commutator(\n      this.traverseAlg(commutator.A, newOptions),\n      this.traverseAlg(commutator.B, newOptions),\n    );\n  }\n\n  public *traverseConjugate(\n    conjugate: Conjugate,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield conjugate;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Conjugate(\n      this.traverseAlg(conjugate.A, newOptions),\n      this.traverseAlg(conjugate.B, newOptions),\n    );\n  }\n\n  public *traversePause(\n    pause: Pause,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield pause;\n  }\n\n  public *traverseNewline(\n    newline: Newline,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield newline;\n  }\n\n  public *traverseLineComment(\n    comment: LineComment,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield comment;\n  }\n}\n\nconst simplifyInstance = new Simplify();\nexport const simplify = simplifyInstance.traverseAlg.bind(simplifyInstance) as (\n  alg: Alg,\n  options: SimplifyOptions,\n) => Generator<Unit>;\n","// tslint:disable-next-line no-namespace // TODO: nested module\n\nimport { Alg } from \"./Alg\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Pause } from \"./units/leaves/Pause\";\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport const Example = {\n  Sune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -2),\n    new Move(\"R\", -1),\n  ]),\n\n  AntiSune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 2),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n  ]),\n\n  SuneCommutator: new Alg([\n    new Commutator(\n      new Alg([new Move(\"R\", 1), new Move(\"U\", 1), new Move(\"R\", -2)]),\n      new Alg([\n        new Conjugate(\n          new Alg([new Move(\"R\", 1)]),\n          new Alg([new Move(\"U\", 1)]),\n          1,\n        ),\n      ]),\n      1,\n    ),\n  ]),\n\n  Niklas: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"L\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"L\", 1),\n    new Move(\"U\", 1),\n  ]),\n\n  EPerm: new Alg([\n    new Move(\"x\", -1),\n    new Commutator(\n      new Alg([\n        new Conjugate(\n          new Alg([new Move(\"R\", 1)]),\n          new Alg([new Move(\"U\", -1)]),\n        ),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n      1,\n    ),\n    new Commutator(\n      new Alg([\n        new Conjugate(new Alg([new Move(\"R\", 1)]), new Alg([new Move(\"U\", 1)])),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n      1,\n    ),\n    new Move(\"x\", 1),\n  ]),\n\n  FURURFCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"U\", 1)]),\n          new Alg([new Move(\"R\", 1)]),\n          1,\n        ),\n      ]),\n      1,\n    ),\n  ]),\n\n  APermCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"R\", 2)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"F\", 2)]),\n          new Alg([new Move(\"R\", -1), new Move(\"B\", -1), new Move(\"R\", 1)]),\n          1,\n        ),\n      ]),\n      1,\n    ),\n  ]),\n\n  FURURFMoves: new Alg([\n    new Move(\"F\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  TPerm: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", 1),\n    new Move(\"R\", 2),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  HeadlightSwaps: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"R\", 1)]),\n          new Alg([new Move(\"U\", 1)]),\n          3,\n        ),\n      ]),\n      1,\n    ),\n  ]),\n\n  TriplePause: new Alg([new Pause(), new Pause(), new Pause()]),\n\n  // AllAlgParts: [\n  //   new Alg([new Move(\"R\", 1), new Move(\"U\", -1)]),\n  //   new Grouping(new Alg([new Move(\"F\", 1)]), 2),\n  //   // new Rotation(\"y\", -1),\n  //   new Move(\"R\", 2),\n  //   new Commutator(new Alg([new Move(\"R\", 2)]), new Alg([new Move(\"U\", 2)]), 2),\n  //   new Conjugate(new Alg([new Move(\"L\", 2)]), new Alg([new Move(\"D\", -1)]), 2),\n  //   new Pause(),\n  //   new Newline(),\n  //   new LineComment(\"line comment\"),\n  // ],\n};\n","import { Move } from \"./units/leaves/Move\";\n\nconst cubeKeyMapping: { [key: number]: Move } = {\n  73: new Move(\"R\"),\n  75: new Move(\"R'\"),\n  87: new Move(\"B\"),\n  79: new Move(\"B'\"),\n  83: new Move(\"D\"),\n  76: new Move(\"D'\"),\n  68: new Move(\"L\"),\n  69: new Move(\"L'\"),\n  74: new Move(\"U\"),\n  70: new Move(\"U'\"),\n  72: new Move(\"F\"),\n  71: new Move(\"F'\"),\n\n  78: new Move(\"x'\"),\n  67: new Move(\"l\"),\n  82: new Move(\"l'\"),\n  85: new Move(\"r\"),\n  77: new Move(\"r'\"),\n\n  88: new Move(\"d\"),\n  188: new Move(\"d'\"),\n\n  84: new Move(\"x\"),\n  89: new Move(\"x\"),\n  66: new Move(\"x'\"),\n  186: new Move(\"y\"),\n  59: new Move(\"y\"),\n  65: new Move(\"y'\"), // 186 is WebKit, 59 is Mozilla; see http://unixpapa.com/js/key.html\n  80: new Move(\"z\"),\n  81: new Move(\"z'\"),\n\n  90: new Move(\"M'\"),\n  190: new Move(\"M'\"),\n};\n\n// TODO: options about whether to ignore modifier keys (e.g. alt, ctrl).\n// TODO: Support different mappings.\n// TODO: Return BaseMove instead?\nexport function keyToMove(e: KeyboardEvent): Move | null {\n  if (e.altKey || e.ctrlKey) {\n    return null;\n  }\n\n  return cubeKeyMapping[e.keyCode] || null;\n}\n","import { Alg } from \"./Alg\";\n\n// This is not the most sophisticated scheme, but it has been used in production\n// at alg.cubing.net for years.\nfunction serializeURLParam(a: Alg): string {\n  let escaped = a.toString();\n  escaped = escaped.replace(/_/g, \"&#95;\").replace(/ /g, \"_\");\n  escaped = escaped.replace(/\\+/g, \"&#2b;\");\n  escaped = escaped.replace(/-/g, \"&#45;\").replace(/'/g, \"-\");\n  return escaped;\n}\n\nexport interface AlgCubingNetOptions {\n  alg?: Alg;\n  setup?: Alg;\n  title?: string;\n  puzzle?:\n    | \"1x1x1\"\n    | \"2x2x2\"\n    | \"3x3x3\"\n    | \"4x4x4\"\n    | \"5x5x5\"\n    | \"6x6x6\"\n    | \"7x7x7\"\n    | \"8x8x8\"\n    | \"9x9x9\"\n    | \"10x10x10\"\n    | \"11x11x11\"\n    | \"12x12x12\"\n    | \"13x13x13\"\n    | \"14x14x14\"\n    | \"16x16x16\"\n    | \"17x17x17\";\n  stage?:\n    | \"full\"\n    | \"cross\"\n    | \"F2L\"\n    | \"LL\"\n    | \"OLL\"\n    | \"PLL\"\n    | \"CLS\"\n    | \"ELS\"\n    | \"L6E\"\n    | \"CMLL\"\n    | \"WV\"\n    | \"ZBLL\"\n    | \"void\";\n  view?: \"editor\" | \"playback\" | \"fullscreen\";\n  type?: \"moves\" | \"reconstruction\" | \"alg\" | \"reconstruction-end-with-setup\";\n}\n\n// TODO: runtime validation?\nexport function algCubingNetLink(options: AlgCubingNetOptions): string {\n  const url = new URL(\"https://alg.cubing.net\");\n  if (!options.alg) {\n    throw new Error(\"An alg parameter is required.\");\n  }\n  url.searchParams.set(\"alg\", serializeURLParam(options.alg));\n\n  if (options.setup) {\n    url.searchParams.set(\"setup\", serializeURLParam(options.setup));\n  }\n  if (options.title) {\n    url.searchParams.set(\"title\", options.title);\n  }\n  if (options.puzzle) {\n    if (\n      ![\n        \"1x1x1\",\n        \"2x2x2\",\n        \"3x3x3\",\n        \"4x4x4\",\n        \"5x5x5\",\n        \"6x6x6\",\n        \"7x7x7\",\n        \"8x8x8\",\n        \"9x9x9\",\n        \"10x10x10\",\n        \"11x11x11\",\n        \"12x12x12\",\n        \"13x13x13\",\n        \"14x14x14\",\n        \"16x16x16\",\n        \"17x17x17\",\n      ].includes(options.puzzle)\n    ) {\n      throw new Error(`Invalid puzzle parameter: ${options.puzzle}`);\n    }\n    url.searchParams.set(\"puzzle\", options.puzzle);\n  }\n  if (options.stage) {\n    if (\n      ![\n        \"full\",\n        \"cross\",\n        \"F2L\",\n        \"LL\",\n        \"OLL\",\n        \"PLL\",\n        \"CLS\",\n        \"ELS\",\n        \"L6E\",\n        \"CMLL\",\n        \"WV\",\n        \"ZBLL\",\n        \"void\",\n      ].includes(options.stage)\n    ) {\n      throw new Error(`Invalid stage parameter: ${options.stage}`);\n    }\n    url.searchParams.set(\"stage\", options.stage);\n  }\n  if (options.view) {\n    if (![\"editor\", \"playback\", \"fullscreen\"].includes(options.view)) {\n      throw new Error(`Invalid view parameter: ${options.view}`);\n    }\n    url.searchParams.set(\"view\", options.view);\n  }\n  if (options.type) {\n    if (\n      ![\n        \"moves\",\n        \"reconstruction\",\n        \"alg\",\n        \"reconstruction-end-with-setup\",\n      ].includes(options.type)\n    ) {\n      throw new Error(`Invalid type parameter: ${options.type}`);\n    }\n    url.searchParams.set(\"type\", options.type);\n  }\n  return url.toString();\n}\n","import { Alg } from \"./Alg\";\nimport { Move } from \"./units/leaves/Move\";\n\nexport function experimentalAppendMove(\n  alg: Alg,\n  newMove: Move,\n  options?: {\n    coalesce?: boolean; // defaults to false\n    mod?: number;\n  },\n): Alg {\n  const oldUnits = Array.from(alg.units());\n  const oldLastMove = oldUnits[oldUnits.length - 1] as Move | undefined;\n  if (\n    options?.coalesce &&\n    oldLastMove &&\n    oldLastMove.quantum &&\n    oldLastMove.quantum.isIdentical(newMove.quantum)\n  ) {\n    const newUnits = oldUnits.slice(0, oldUnits.length - 1);\n    let newAmount = oldLastMove.effectiveAmount + newMove.effectiveAmount;\n    const mod = options?.mod;\n    if (mod) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newUnits.push(oldLastMove.modified({ repetition: newAmount }));\n    }\n    return new Alg(newUnits);\n  } else {\n    return new Alg([...oldUnits, newMove]);\n  }\n}\n"],"names":["toIterable","input","Alg","units","iter","Symbol","iterator","experimentalEnsureAlg","alg","AlgCommon","constructor","Array","from","unit","Error","isIdentical","other","otherAsAlg","is","l1","l2","length","i","invert","map","u","experimentalExpand","iterDir","IterationDirection","Forwards","depth","Infinity","expand","options","experimentalLeafMoves","leaf","Move","concat","experimentalIsEmpty","_","fromString","s","experimentalNumUnits","type","toString","output","previousUnit","spaceBetween","simplify","u1","u2","Pause","Newline","LineComment","writeAlgDebugField","setAlgDebugField","debug","Comparable","c","Object","defineProperty","get","experimentalIs","v","experimentalIsUnit","Grouping","Commutator","Conjugate","algSource","repetitionInfo","Repetition","otherAsGrouping","experimentalAlg","quantum","experimentalEffectiveAmount","experimentalRepetitionSuffix","suffix","inverseInfo","toggleDirection","iterationDirection","flip","Backwards","direct","g","reverse","directedGenerator","direction","reverseGenerator","t","absAmount","Math","abs","prime","Number","isInteger","MAX_INT","MAX_INT_DESCRIPTION","info","newIterDir","commentText","includes","text","otherAsLineComment","_iterDir","_depth","QuantumCommutator","A","B","freeze","otherAsQuantumCommutator","aSource","bSource","otherAsCommutator","otherAsConjugate","QuantumMove","family","innerLayer","outerLayer","modified","modifications","otherAsQuantumMove","String","args","otherAsMove","repetition","equals","effectiveAmount","undefined","parseIntWithEmptyFallback","n","emptyFallback","parseInt","repetitionRegex","moveStartRegex","quantumMoveRegex","commentTextRegex","parseAlg","AlgParser","parseMove","parseQuantumMove","addCharIndex","charIndex","parsedT","transferCharIndex","to","parseAlgWithStopping","mustBeAtEndOfInput","move","parseMoveImpl","quantumMove","parseQuantumMoveImpl","stopBefore","algStartIdx","algBuilder","AlgBuilder","crowded","mustNotBeCrowded","mainLoop","savedCharIndex","toAlg","tryConsumeNext","test","push","mustConsumeNext","parseRepetition","separator","popNext","parseRegex","outerLayerStr","innerLayerStr","absAmountStr","primeStr","regex","arr","exec","remaining","slice","next","expected","reset","warned","Set","warnOnce","has","console","warn","add","dispatch","dataDown","traverseGrouping","traverseMove","traverseCommutator","traverseConjugate","traversePause","traverseNewline","traverseLineComment","assertIsUnit","TraversalDownUp","traverseUnit","traverseIntoUnit","TraversalUp","Simplify","traverseAlg","newUnits","lastUnit","collapseMoves","appendCollapsed","newUnit","lastMove","newMove","pop","newAmount","quantumMoveOrder","order","coalescedMove","newOptions","ancestorUnit","grouping","_options","commutator","conjugate","pause","newline","comment","simplifyInstance","bind","Example","Sune","AntiSune","SuneCommutator","Niklas","EPerm","FURURFCompact","APermCompact","FURURFMoves","TPerm","HeadlightSwaps","TriplePause","cubeKeyMapping","keyToMove","e","altKey","ctrlKey","keyCode","serializeURLParam","a","escaped","replace","algCubingNetLink","url","URL","searchParams","set","setup","title","puzzle","stage","view","experimentalAppendMove","oldUnits","oldLastMove","coalesce","mod"],"version":3,"file":"puzzle-geometry.2c6f55a3.js.map"}