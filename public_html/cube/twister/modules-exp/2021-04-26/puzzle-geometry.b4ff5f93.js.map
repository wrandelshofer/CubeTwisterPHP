{"mappings":"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","sources":["./src/cubing/puzzle-geometry/index.ts","./src/cubing/puzzle-geometry/Perm.ts","./src/cubing/puzzle-geometry/PermOriSet.ts","./src/cubing/puzzle-geometry/PuzzleGeometry.ts","./src/cubing/puzzle-geometry/FaceNameSwizzler.ts","./src/cubing/puzzle-geometry/NotationMapper.ts","./src/cubing/puzzle-geometry/PGPuzzles.ts","./src/cubing/puzzle-geometry/PlatonicGenerator.ts","./src/cubing/puzzle-geometry/Quat.ts","./src/cubing/puzzle-geometry/SchreierSims.ts"],"sourcesContent":["export { Perm } from \"./Perm\";\nexport {\n  Orbit,\n  OrbitDef,\n  OrbitsDef,\n  Transformation,\n  VisibleState,\n} from \"./PermOriSet\";\nexport {\n  getpuzzle,\n  getPuzzleGeometryByDesc,\n  getPuzzleGeometryByName,\n  getpuzzles,\n  parsedesc,\n  PuzzleGeometry,\n  StickerDat,\n  StickerDatAxis,\n  StickerDatFace,\n  StickerDatSticker,\n  useNewFaceNames,\n} from \"./PuzzleGeometry\";\nexport { Quat } from \"./Quat\";\nexport { schreierSims } from \"./SchreierSims\";\n","const zeroCache: number[][] = [];\nconst iotaCache: number[][] = [];\n\nexport function zeros(n: number): number[] {\n  if (!zeroCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = 0;\n    }\n    zeroCache[n] = c;\n  }\n  return zeroCache[n];\n}\n\nexport function iota(n: number): number[] {\n  if (!iotaCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = i;\n    }\n    iotaCache[n] = c;\n  }\n  return iotaCache[n];\n}\n\nexport function identity(n: number): Perm {\n  return new Perm(iota(n));\n}\n\nexport function random(n: number): Perm {\n  // random\n  const c = Array(n);\n  for (let i = 0; i < n; i++) {\n    c[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    const j = i + Math.floor((n - i) * Math.random());\n    const t = c[i];\n    c[i] = c[j];\n    c[j] = t;\n  }\n  return new Perm(c);\n}\n\nexport function factorial(a: number): number {\n  let r = 1;\n  while (a > 1) {\n    r *= a;\n    a--;\n  }\n  return r;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (a > b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (a > 0) {\n    const m = b % a;\n    b = a;\n    a = m;\n  }\n  return b;\n}\n\nexport function lcm(a: number, b: number): number {\n  return (a / gcd(a, b)) * b;\n}\n\nexport class Perm {\n  public n: number; // length\n  public p: number[]; // The permutation itself\n  constructor(a: number[]) {\n    this.n = a.length;\n    this.p = a;\n  }\n\n  public toString(): string {\n    // stringify\n    return \"Perm[\" + this.p.join(\" \") + \"]\";\n  }\n\n  public mul(p2: Perm): Perm {\n    // multiply\n    const c: number[] = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = p2.p[this.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public rmul(p2: Perm): Perm {\n    // multiply the other way\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = this.p[p2.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public inv(): Perm {\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[this.p[i]] = i;\n    }\n    return new Perm(c);\n  }\n\n  public compareTo(p2: Perm): number {\n    // comparison\n    for (let i = 0; i < this.n; i++) {\n      if (this.p[i] !== p2.p[i]) {\n        return this.p[i] - p2.p[i];\n      }\n    }\n    return 0;\n  }\n\n  public toGap(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(\"(\" + incyc.join(\",\") + \")\");\n    }\n    return cyc.join(\"\");\n  }\n\n  public order(): number {\n    let r = 1;\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      let cs = 0;\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        cs++;\n        seen[j] = true;\n      }\n      r = lcm(r, cs);\n    }\n    return r;\n  }\n}\n","import { PGVendoredKPuzzleDefinition } from \"./interfaces\"; // TODO\n/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ import {\n  factorial,\n  iota,\n  lcm,\n  Perm,\n  zeros,\n} from \"./Perm\";\nexport class OrbitDef {\n  constructor(public size: number, public mod: number) {}\n  public reassemblySize(): number {\n    return factorial(this.size) * Math.pow(this.mod, this.size);\n  }\n}\n\nexport class OrbitsDef {\n  constructor(\n    public orbitnames: string[],\n    public orbitdefs: OrbitDef[],\n    public solved: VisibleState,\n    public movenames: string[],\n    public moveops: Transformation[],\n  ) {}\n\n  public transformToKPuzzle(t: Transformation): any {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < this.orbitnames.length; j++) {\n      mp[this.orbitnames[j]] = t.orbits[j].toKpuzzle();\n    }\n    return mp;\n  }\n\n  public static transformToKPuzzle(\n    orbitnames: string[],\n    t: Transformation,\n  ): any {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < orbitnames.length; j++) {\n      mp[orbitnames[j]] = t.orbits[j].toKpuzzle();\n    }\n    return mp;\n  }\n\n  public toKsolve(name: string): string[] {\n    const result = [];\n    result.push(\"Name \" + name);\n    result.push(\"\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      result.push(\n        \"Set \" +\n          this.orbitnames[i] +\n          \" \" +\n          this.orbitdefs[i].size +\n          \" \" +\n          this.orbitdefs[i].mod,\n      );\n    }\n    result.push(\"\");\n    result.push(\"Solved\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      this.solved.orbits[i].appendConciseDefinition(result, this.orbitnames[i], true);\n    }\n    result.push(\"End\");\n    for (let i = 0; i < this.movenames.length; i++) {\n      result.push(\"\");\n      result.push(\"Move \" + this.movenames[i]);\n      for (let j = 0; j < this.orbitnames.length; j++) {\n        this.moveops[i].orbits[j].appendConciseDefinition(result, this.orbitnames[j], false);\n      }\n      result.push(\"End\");\n    }\n    // extra blank line on end lets us use join(\"\\n\") to terminate all\n    return result;\n  }\n\n  // TODO: return type.\n  public toKpuzzle(): PGVendoredKPuzzleDefinition {\n    const orbits: { [orbitName: string]: any } = {};\n    const start: { [orbitName: string]: any } = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      orbits[this.orbitnames[i]] = {\n        numPieces: this.orbitdefs[i].size,\n        orientations: this.orbitdefs[i].mod,\n      };\n      start[this.orbitnames[i]] = this.solved.orbits[i].toKpuzzle();\n    }\n    const moves: { [moveName: string]: any } = {};\n    for (let i = 0; i < this.movenames.length; i++) {\n      moves[this.movenames[i]] = this.transformToKPuzzle(this.moveops[i]);\n    }\n    return { name: \"PG3D\", orbits, startPieces: start, moves };\n  }\n\n  public optimize(): OrbitsDef {\n    const neworbitnames: string[] = [];\n    const neworbitdefs: OrbitDef[] = [];\n    const newsolved: Orbit[] = [];\n    const newmoveops: Orbit[][] = [];\n    for (let j = 0; j < this.moveops.length; j++) {\n      newmoveops.push([]);\n    }\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      const om = this.orbitdefs[i].mod;\n      const n = this.orbitdefs[i].size;\n      const du = new DisjointUnion(n);\n      const changed = new Array<boolean>(this.orbitdefs[i].size);\n      for (let k = 0; k < n; k++) {\n        changed[k] = false;\n      }\n      for (let j = 0; j < this.moveops.length; j++) {\n        for (let k = 0; k < n; k++) {\n          if (\n            this.moveops[j].orbits[i].perm[k] !== k ||\n            this.moveops[j].orbits[i].ori[k] !== 0\n          ) {\n            changed[k] = true;\n            du.union(k, this.moveops[j].orbits[i].perm[k]);\n          }\n        }\n      }\n      let keepori = true;\n      // right now we kill ori only if solved is unique and\n      // if we can kill it completely.  This is not all the optimization\n      // we can perform.\n      if (om > 1) {\n        keepori = false;\n        const duo = new DisjointUnion(this.orbitdefs[i].size * om);\n        for (let j = 0; j < this.moveops.length; j++) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              for (let o = 0; o < om; o++) {\n                duo.union(\n                  k * om + o,\n                  this.moveops[j].orbits[i].perm[k] * om +\n                    ((o + this.moveops[j].orbits[i].ori[k]) % om),\n                );\n              }\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let o = 1; o < om; o++) {\n            if (duo.find(j * om) === duo.find(j * om + o)) {\n              keepori = true;\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let k = 0; k < j; k++) {\n            if (\n              this.solved.orbits[i].perm[j] === this.solved.orbits[i].perm[k]\n            ) {\n              keepori = true;\n            }\n          }\n        }\n      }\n      // is there just one result set, or more than one?\n      let nontriv = -1;\n      let multiple = false;\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (changed[j]) {\n          const h = du.find(j);\n          if (nontriv < 0) {\n            nontriv = h;\n          } else if (nontriv !== h) {\n            multiple = true;\n          }\n        }\n      }\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (!changed[j]) {\n          continue;\n        }\n        const h = du.find(j);\n        if (h !== j) {\n          continue;\n        }\n        const no: number[] = [];\n        const on: number[] = [];\n        let nv = 0;\n        for (let k = 0; k < this.orbitdefs[i].size; k++) {\n          if (du.find(k) === j) {\n            no[nv] = k;\n            on[k] = nv;\n            nv++;\n          }\n        }\n        if (multiple) {\n          neworbitnames.push(this.orbitnames[i] + \"_p\" + j);\n        } else {\n          neworbitnames.push(this.orbitnames[i]);\n        }\n        if (keepori) {\n          neworbitdefs.push(new OrbitDef(nv, this.orbitdefs[i].mod));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv));\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(this.moveops[k].orbits[i].remap(no, on, nv));\n          }\n        } else {\n          neworbitdefs.push(new OrbitDef(nv, 1));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv).killOri());\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(\n              this.moveops[k].orbits[i].remap(no, on, nv).killOri(),\n            );\n          }\n        }\n      }\n    }\n    return new OrbitsDef(\n      neworbitnames,\n      neworbitdefs,\n      new VisibleState(newsolved),\n      this.movenames,\n      newmoveops.map((_) => new Transformation(_)),\n    );\n  }\n\n  // generate a new \"solved\" position based on scrambling\n  // we use an algorithm that should be faster for large puzzles than\n  // just picking random moves.\n  public scramble(n: number): void {\n    const pool: Transformation[] = [];\n    for (let i = 0; i < this.moveops.length; i++) {\n      pool[i] = this.moveops[i];\n    }\n    for (let i = 0; i < pool.length; i++) {\n      const j = Math.floor(Math.random() * pool.length);\n      const t = pool[i];\n      pool[i] = pool[j];\n      pool[j] = t;\n    }\n    if (n < pool.length) {\n      n = pool.length;\n    }\n    for (let i = 0; i < n; i++) {\n      const ri = Math.floor(Math.random() * pool.length);\n      const rj = Math.floor(Math.random() * pool.length);\n      const rm = Math.floor(Math.random() * this.moveops.length);\n      pool[ri] = pool[ri].mul(pool[rj]).mul(this.moveops[rm]);\n      if (Math.random() < 0.1) {\n        // break up parity\n        pool[ri] = pool[ri].mul(this.moveops[rm]);\n      }\n    }\n    let s = pool[0];\n    for (let i = 1; i < pool.length; i++) {\n      s = s.mul(pool[i]);\n    }\n    this.solved = this.solved.mul(s);\n  }\n\n  public reassemblySize(): number {\n    let n = 1;\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      n *= this.orbitdefs[i].reassemblySize();\n    }\n    return n;\n  }\n}\n\nexport class Orbit {\n  static kcache: Record<string, unknown>[] = [];\n\n  public static e(n: number, mod: number): Orbit {\n    return new Orbit(iota(n), zeros(n), mod);\n  }\n\n  constructor(\n    public perm: number[],\n    public ori: number[],\n    public orimod: number,\n  ) {}\n\n  public mul(b: Orbit): Orbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    if (this.orimod === 1) {\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n      }\n      return new Orbit(newPerm, this.ori, this.orimod);\n    } else {\n      const newOri = new Array<number>(n);\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n        newOri[i] = (this.ori[b.perm[i]] + b.ori[i]) % this.orimod;\n      }\n      return new Orbit(newPerm, newOri, this.orimod);\n    }\n  }\n\n  public inv(): Orbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    const newOri = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      newPerm[this.perm[i]] = i;\n      newOri[this.perm[i]] = (this.orimod - this.ori[i]) % this.orimod;\n    }\n    return new Orbit(newPerm, newOri, this.orimod);\n  }\n\n  public equal(b: Orbit): boolean {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== b.perm[i] || this.ori[i] !== b.ori[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // in-place mutator\n  public killOri(): this {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      this.ori[i] = 0;\n    }\n    this.orimod = 1;\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const o = this.orimod;\n    if (o === 1) {\n      return new Perm(this.perm);\n    }\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n * o);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < o; j++) {\n        newPerm[i * o + j] = o * this.perm[i] + ((this.ori[i] + j) % o);\n      }\n    }\n    return new Perm(newPerm);\n  }\n\n  // returns tuple of sets of identical pieces in this orbit\n  public identicalPieces(): number[][] {\n    const done: boolean[] = [];\n    const n = this.perm.length;\n    const r: number[][] = [];\n    for (let i = 0; i < n; i++) {\n      const v = this.perm[i];\n      if (done[v] === undefined) {\n        const s: number[] = [i];\n        done[v] = true;\n        for (let j = i + 1; j < n; j++) {\n          if (this.perm[j] === v) {\n            s.push(j);\n          }\n        }\n        r.push(s);\n      }\n    }\n    return r;\n  }\n\n  public order(): number {\n    // can be made more efficient\n    return this.toPerm().order();\n  }\n\n  public isIdentity(): boolean {\n    const n = this.perm.length;\n    if (this.perm === iota(n) && this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== i || this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public zeroOris(): boolean {\n    const n = this.perm.length;\n    if (this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public remap(no: number[], on: number[], nv: number): Orbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    for (let i = 0; i < nv; i++) {\n      newPerm[i] = on[this.perm[no[i]]];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new Orbit(newPerm, newOri, this.orimod);\n  }\n\n  public remapVS(no: number[], nv: number): Orbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    let nextNew = 0;\n    const reassign = [];\n    for (let i = 0; i < nv; i++) {\n      const ov = this.perm[no[i]];\n      if (reassign[ov] === undefined) {\n        reassign[ov] = nextNew++;\n      }\n      newPerm[i] = reassign[ov];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new Orbit(newPerm, newOri, this.orimod);\n  }\n\n  public appendConciseDefinition(result:String[], name: string, useVS: boolean): void {\n    if (this.isIdentity()) {\n      return;\n    }\n    result.push(name);\n    result.push(this.perm.map((_: number) => _ + 1).join(\" \"));\n    if (!this.zeroOris()) {\n      if (useVS) {\n        const newori = new Array<number>(this.ori.length);\n        for (let i = 0; i < newori.length; i++) {\n          newori[this.perm[i]] = this.ori[i];\n        }\n        result.push(newori.join(\" \"));\n      } else {\n        result.push(this.ori.join(\" \"));\n      }\n    }\n  }\n\n  // TODO: return type\n  public toKpuzzle(): Record<string, unknown> {\n    const n = this.perm.length;\n    if (this.isIdentity()) {\n      if (!Orbit.kcache[n]) {\n        Orbit.kcache[n] = { permutation: iota(n), orientation: zeros(n) };\n      }\n      return Orbit.kcache[n];\n    } else {\n      return { permutation: this.perm, orientation: this.ori };\n    }\n  }\n}\nexport class TransformationBase {\n  constructor(public orbits: Orbit[]) {}\n  public internalMul(b: TransformationBase): Orbit[] {\n    const newOrbits: Orbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].mul(b.orbits[i]));\n    }\n    return newOrbits;\n  }\n\n  public internalInv(): Orbit[] {\n    const newOrbits: Orbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].inv());\n    }\n    return newOrbits;\n  }\n\n  public equal(b: TransformationBase): boolean {\n    for (let i = 0; i < this.orbits.length; i++) {\n      if (!this.orbits[i].equal(b.orbits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public killOri(): this {\n    for (let i = 0; i < this.orbits.length; i++) {\n      this.orbits[i].killOri();\n    }\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const perms = new Array<Perm>();\n    let n = 0;\n    for (let i = 0; i < this.orbits.length; i++) {\n      const p = this.orbits[i].toPerm();\n      perms.push(p);\n      n += p.n;\n    }\n    const newPerm = new Array<number>(n);\n    n = 0;\n    for (let i = 0; i < this.orbits.length; i++) {\n      const p = perms[i];\n      for (let j = 0; j < p.n; j++) {\n        newPerm[n + j] = n + p.p[j];\n      }\n      n += p.n;\n    }\n    return new Perm(newPerm);\n  }\n\n  public identicalPieces(): number[][] {\n    const r: number[][] = [];\n    let n = 0;\n    for (let i = 0; i < this.orbits.length; i++) {\n      const o = this.orbits[i].orimod;\n      const s = this.orbits[i].identicalPieces();\n      for (let j = 0; j < s.length; j++) {\n        r.push(s[j].map((_) => _ * o + n));\n      }\n      n += o * this.orbits[i].perm.length;\n    }\n    return r;\n  }\n\n  public order(): number {\n    let r = 1;\n    for (let i = 0; i < this.orbits.length; i++) {\n      r = lcm(r, this.orbits[i].order());\n    }\n    return r;\n  }\n}\nexport class Transformation extends TransformationBase {\n  constructor(orbits: Orbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: Transformation): Transformation {\n    return new Transformation(this.internalMul(b));\n  }\n\n  public mulScalar(n: number): Transformation {\n    if (n === 0) {\n      return this.e();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let t: Transformation = this;\n    if (n < 0) {\n      t = t.inv();\n      n = -n;\n    }\n    while ((n & 1) === 0) {\n      t = t.mul(t);\n      n >>= 1;\n    }\n    if (n === 1) {\n      return t;\n    }\n    let s = t;\n    let r = this.e();\n    while (n > 0) {\n      if (n & 1) {\n        r = r.mul(s);\n      }\n      if (n > 1) {\n        s = s.mul(s);\n      }\n      n >>= 1;\n    }\n    return r;\n  }\n\n  public inv(): Transformation {\n    return new Transformation(this.internalInv());\n  }\n\n  public e(): Transformation {\n    return new Transformation(\n      this.orbits.map((_: Orbit) => Orbit.e(_.perm.length, _.orimod)),\n    );\n  }\n}\nexport class VisibleState extends TransformationBase {\n  constructor(orbits: Orbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: Transformation): VisibleState {\n    return new VisibleState(this.internalMul(b));\n  }\n}\n//  Disjoint set union implementation.\nclass DisjointUnion {\n  public heads: number[];\n  constructor(public n: number) {\n    this.heads = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      this.heads[i] = i;\n    }\n  }\n\n  public find(v: number): number {\n    let h = this.heads[v];\n    if (this.heads[h] === h) {\n      return h;\n    }\n    h = this.find(this.heads[h]);\n    this.heads[v] = h;\n    return h;\n  }\n\n  public union(a: number, b: number): void {\n    const ah = this.find(a);\n    const bh = this.find(b);\n    if (ah < bh) {\n      this.heads[bh] = ah;\n    } else if (ah > bh) {\n      this.heads[ah] = bh;\n    }\n  }\n}\nexport function showcanon(g: OrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  curlev[0] = 1;\n  for (let d = 0; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (\n          ((st >> mv) & 1) === 0 &&\n          (st & commutes[mv] & ((1 << mv) - 1)) === 0\n        ) {\n          const nst = (st & commutes[mv]) | (1 << mv);\n          if (nextlev[nst] === undefined) {\n            nextlev[nst] = 0;\n          }\n          nextlev[nst] += (orders[mv] - 1) * cnt;\n        }\n      }\n    }\n    disp(\"\" + d + \": canonseq \" + sum + \" states \" + uniq);\n    curlev = nextlev;\n  }\n}\n// This is a less effective canonicalization (that happens to work fine\n// for the 3x3x3).  We include this only for comparison.\nexport function showcanon0(g: OrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  disp(\"\" + 0 + \": canonseq \" + 1);\n  for (let x = 0; x < orders.length; x++) {\n    curlev[x] = orders[x] - 1;\n  }\n  for (let d = 1; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (mv === st || (commutes[mv] & (1 << st) && mv < st)) {\n          continue;\n        }\n        if (nextlev[mv] === undefined) {\n          nextlev[mv] = 0;\n        }\n        nextlev[mv] += (orders[mv] - 1) * cnt;\n      }\n    }\n    disp(\"\" + d + \": canonseq \" + sum + \" states \" + uniq);\n    curlev = nextlev;\n  }\n}\n","/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n/* tslint:disable only-arrow-functions */ // TODO\n/* tslint:disable typedef */ // TODO\n\nimport { Move, QuantumMove } from \"../alg\";\nimport { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport {\n  MoveNotation,\n  PGVendoredKPuzzleDefinition,\n  Transformation as KTransformation,\n} from \"./interfaces\";\nimport {\n  FaceRenamingMapper,\n  FTONotationMapper,\n  MegaminxScramblingNotationMapper,\n  NotationMapper,\n  NullMapper,\n  NxNxNCubeMapper,\n  PyraminxNotationMapper,\n  SkewbNotationMapper,\n} from \"./NotationMapper\";\nimport { iota, Perm, zeros } from \"./Perm\";\nimport {\n  Orbit,\n  OrbitDef,\n  OrbitsDef,\n  showcanon,\n  Transformation,\n  VisibleState,\n} from \"./PermOriSet\";\nimport { PGPuzzles, PuzzleDescriptionString, PuzzleName } from \"./PGPuzzles\";\nimport {\n  closure,\n  cube,\n  dodecahedron,\n  getface,\n  icosahedron,\n  octahedron,\n  tetrahedron,\n  uniqueplanes,\n} from \"./PlatonicGenerator\";\nimport { centermassface, expandfaces, FaceTree, Quat } from \"./Quat\";\n\nconst DEFAULT_COLOR_FRACTION = 0.77;\n\nexport interface StickerDatSticker {\n  coords: number[][];\n  color: string;\n  orbit: string;\n  ord: number;\n  ori: number;\n}\n\nexport interface StickerDatFace {\n  coords: number[][];\n  name: string;\n}\n\nexport type StickerDatAxis = [number[], string, number];\n\nexport interface StickerDat {\n  stickers: StickerDatSticker[];\n  foundations: StickerDatSticker[];\n  faces: StickerDatFace[];\n  axis: StickerDatAxis[];\n  unswizzle(mv: Move): string;\n  notationMapper: NotationMapper;\n}\n\n// TODO: Remove this once we no longer have prefix restrictions.\nlet NEW_FACE_NAMES = true;\nexport function useNewFaceNames(use: boolean): void {\n  NEW_FACE_NAMES = use;\n}\n\n//  Now we have a geometry class that does the 3D goemetry to calculate\n//  individual sticker information from a Platonic solid and a set of\n//  cuts.  The cuts must have the same symmetry as the Platonic solid;\n//  we even restrict them further to be either vertex-normal,\n//  edge-normal, or face-parallel cuts.  Right now our constructor takes\n//  a character solid indicator (one of c(ube), o(ctahedron), i(cosahedron),\n//  t(etradron), or d(odecahedron), followed by an array of cuts.\n//  Each cut is a character normal indicator that is either f(ace),\n//  e(dge), or v(ertex), followed by a floating point value that gives\n//  the depth of the cut where 0 is the center and 1 is the outside\n//  border of the shape in that direction.\n\n//  This is a heavyweight class with lots of members and construction\n//  is slow.  Be gentle.\n\n//  Everything except a very few methods should be considered private.\n\nconst eps: number = 1e-9;\nconst copyright = \"PuzzleGeometry 0.1 Copyright 2018 Tomas Rokicki.\";\nconst permissivieMoveParsing = false;\n\n// This is a description of the nets and the external names we give each\n// face.  The names should be a set of prefix-free upper-case alphabetics\n// so\n// we can easily also name and distinguish vertices and edges, but we\n// may change this in the future.  The nets consist of a list of lists.\n// Each list gives the name of a face, and then the names of the\n// faces connected to that face (in the net) in clockwise order.\n// The length of each list should be one more than the number of\n// edges in the regular polygon for that face.  All polygons must\n// have the same number of edges.\n// The first two faces in the first list must describe a horizontal edge\n// that is at the bottom of a regular polygon.  The first two faces in\n// every subsequent list for a given polytope must describe a edge that\n// is directly connected in the net and has already been described (this\n// sets the location and orientation of the polygon for that face.\n// Any edge that is not directly connected in the net should be given\n// the empty string as the other face.  All faces do not need to have\n// a list starting with that face; just enough to describe the full\n// connectivity of the net.\n//\n// TODO: change this back to a const JSON definition.\nfunction defaultnets(): any {\n  return {\n    // four faces: tetrahedron\n    4: [[\"F\", \"D\", \"L\", \"R\"]],\n    // six faces: cube\n    6: [\n      [\"F\", \"D\", \"L\", \"U\", \"R\"],\n      [\"R\", \"F\", \"\", \"B\", \"\"],\n    ],\n    // eight faces: octahedron\n    8: [\n      [\"F\", \"D\", \"L\", \"R\"],\n      [\"D\", \"F\", \"BR\", \"\"],\n      [\"BR\", \"D\", \"\", \"BB\"],\n      [\"BB\", \"BR\", \"U\", \"BL\"],\n    ],\n    // twelve faces:  dodecahedron; U/F/R/F/BL/BR from megaminx\n    12: [\n      [\"U\", \"F\", \"\", \"\", \"\", \"\"],\n      [\"F\", \"U\", \"R\", \"C\", \"A\", \"L\"],\n      [\"R\", \"F\", \"\", \"\", \"E\", \"\"],\n      [\"E\", \"R\", \"\", \"BF\", \"\", \"\"],\n      [\"BF\", \"E\", \"BR\", \"BL\", \"I\", \"D\"],\n    ],\n    // twenty faces: icosahedron\n    20: [\n      [\"R\", \"C\", \"F\", \"E\"],\n      [\"F\", \"R\", \"L\", \"U\"],\n      [\"L\", \"F\", \"A\", \"\"],\n      [\"E\", \"R\", \"G\", \"I\"],\n      [\"I\", \"E\", \"S\", \"H\"],\n      [\"S\", \"I\", \"J\", \"B\"],\n      [\"B\", \"S\", \"K\", \"D\"],\n      [\"K\", \"B\", \"M\", \"O\"],\n      [\"O\", \"K\", \"P\", \"N\"],\n      [\"P\", \"O\", \"Q\", \"\"],\n    ],\n  };\n}\n\n// TODO: change this back to a const JSON definition.\nfunction defaultcolors(): any {\n  return {\n    // the colors should use the same naming convention as the nets, above.\n    4: { F: \"#00ff00\", D: \"#ffff00\", L: \"#ff0000\", R: \"#0000ff\" },\n    6: {\n      U: \"#ffffff\",\n      F: \"#00ff00\",\n      R: \"#ff0000\",\n      D: \"#ffff00\",\n      B: \"#0000ff\",\n      L: \"#ff8000\",\n    },\n    8: {\n      U: \"#ffffff\",\n      F: \"#ff0000\",\n      R: \"#00bb00\",\n      D: \"#ffff00\",\n      BB: \"#1122ff\",\n      L: \"#9524c5\",\n      BL: \"#ff8800\",\n      BR: \"#aaaaaa\",\n    },\n    12: {\n      U: \"#ffffff\",\n      F: \"#006633\",\n      R: \"#ff0000\",\n      C: \"#ffffd0\",\n      A: \"#3399ff\",\n      L: \"#660099\",\n      E: \"#ff66cc\",\n      BF: \"#99ff00\",\n      BR: \"#0000ff\",\n      BL: \"#ffff00\",\n      I: \"#ff6633\",\n      D: \"#999999\",\n    },\n    20: {\n      R: \"#db69f0\",\n      C: \"#178fde\",\n      F: \"#23238b\",\n      E: \"#9cc726\",\n      L: \"#2c212d\",\n      U: \"#177fa7\",\n      A: \"#e0de7f\",\n      G: \"#2b57c0\",\n      I: \"#41126b\",\n      S: \"#4b8c28\",\n      H: \"#7c098d\",\n      J: \"#7fe7b4\",\n      B: \"#85fb74\",\n      K: \"#3f4bc3\",\n      D: \"#0ff555\",\n      M: \"#f1c2c8\",\n      O: \"#58d340\",\n      P: \"#c514f2\",\n      N: \"#14494e\",\n      Q: \"#8b1be1\",\n    },\n  };\n}\n\n// the default precedence of the faces is given here.  This permits\n// the orientations to be reasonably predictable.  There are tradeoffs;\n// some face precedence orders do better things to the edge orientations\n// than the corner orientations and some are the opposite.\n// TODO: change this back to a const JSON definition.\nfunction defaultfaceorders(): any {\n  return {\n    4: [\"F\", \"D\", \"L\", \"R\"],\n    6: [\"U\", \"D\", \"F\", \"B\", \"L\", \"R\"],\n    8: [\"F\", \"BB\", \"D\", \"U\", \"BR\", \"L\", \"R\", \"BL\"],\n    12: [\"L\", \"E\", \"F\", \"BF\", \"R\", \"I\", \"U\", \"D\", \"BR\", \"A\", \"BL\", \"C\"],\n    20: [\n      \"L\",\n      \"S\",\n      \"E\",\n      \"O\",\n      \"F\",\n      \"B\",\n      \"I\",\n      \"P\",\n      \"R\",\n      \"K\",\n      \"U\",\n      \"D\",\n      \"J\",\n      \"A\",\n      \"Q\",\n      \"H\",\n      \"G\",\n      \"N\",\n      \"M\",\n      \"C\",\n    ],\n  };\n}\n\n/*\n *  Default orientations for the puzzles in 3D space.  Can be overridden\n *  by puzzleOrientation or puzzleOrientations options.\n *\n *  These are defined to have a strong intuitive vertical (y) direction\n *  since 3D orbital controls need this.  In comments, we list the\n *  preferred initial camera orientation for each puzzle for twizzle;\n *  this information is explicitly given in the twizzle app file.\n */\n// TODO: change this back to a const JSON definition.\nfunction defaultOrientations(): any {\n  return {\n    4: [\"FLR\", [0, 1, 0], \"F\", [0, 0, 1]], // FLR towards viewer\n    6: [\"U\", [0, 1, 0], \"F\", [0, 0, 1]], // URF towards viewer\n    8: [\"U\", [0, 1, 0], \"F\", [0, 0, 1]], // FLUR towards viewer\n    12: [\"U\", [0, 1, 0], \"F\", [0, 0, 1]], // F towards viewer\n    20: [\"GUQMJ\", [0, 1, 0], \"F\", [0, 0, 1]], // F towards viewer\n  };\n}\n\nfunction findelement(a: any[], p: Quat): number {\n  // find something in facenames, vertexnames, edgenames\n  for (let i = 0; i < a.length; i++) {\n    if (a[i][0].dist(p) < eps) {\n      return i;\n    }\n  }\n  throw new Error(\"Element not found\");\n}\n\nexport function getpuzzles(): { [s: string]: PuzzleDescriptionString } {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles;\n}\n\nexport function getpuzzle(puzzleName: PuzzleName): PuzzleDescriptionString {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles[puzzleName];\n}\n\nexport function parsedesc(s: string): any {\n  // parse a text description\n  const a = s.split(/ /).filter(Boolean);\n  if (a.length % 2 === 0) {\n    return false;\n  }\n  if (\n    a[0] !== \"o\" &&\n    a[0] !== \"c\" &&\n    a[0] !== \"i\" &&\n    a[0] !== \"d\" &&\n    a[0] !== \"t\"\n  ) {\n    return false;\n  }\n  const r = [];\n  for (let i = 1; i < a.length; i += 2) {\n    if (a[i] !== \"f\" && a[i] !== \"v\" && a[i] !== \"e\") {\n      return false;\n    }\n    r.push([a[i], a[i + 1]]);\n  }\n  return [a[0], r];\n}\n\nexport function getPuzzleGeometryByDesc(\n  desc: string,\n  options: string[] = [],\n): PuzzleGeometry {\n  const [shape, cuts] = parsedesc(desc);\n  const pg = new PuzzleGeometry(\n    shape,\n    cuts,\n    [\"allmoves\", \"true\"].concat(options),\n  );\n  pg.allstickers();\n  pg.genperms();\n  return pg;\n}\n\nexport function getPuzzleGeometryByName(\n  puzzleName: PuzzleName,\n  options: string[] = [],\n): PuzzleGeometry {\n  return getPuzzleGeometryByDesc(PGPuzzles[puzzleName], options);\n}\n\nfunction getmovename(geo: any, bits: number[], slices: number): any {\n  // generate a move name based on bits, slice, and geo\n  // if the move name is from the opposite face, say so.\n  // find the face that's turned.\n  let inverted = false;\n  if (slices - bits[1] < bits[0]) {\n    // flip if most of the move is on the other side\n    geo = [geo[2], geo[3], geo[0], geo[1]];\n    bits = [slices - bits[1], slices - bits[0]];\n    inverted = true;\n  }\n  let movenameFamily = geo[0];\n  let movenamePrefix = \"\";\n  if (bits[0] === 0 && bits[1] === slices) {\n    movenameFamily = movenameFamily + \"v\";\n  } else if (bits[0] === bits[1]) {\n    if (bits[1] > 0) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else if (bits[0] === 0) {\n    movenameFamily = movenameFamily.toLowerCase();\n    if (bits[1] > 1) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else {\n    throw \"We only support slice and outer block moves right now. \" + bits;\n  }\n  return [movenamePrefix + movenameFamily, inverted];\n}\n\n// split a geometrical element into face names.  Do greedy match.\n// Permit underscores between names.\nfunction splitByFaceNames(s: string, facenames: any[]): string[] {\n  const r: string[] = [];\n  let at = 0;\n  while (at < s.length) {\n    if (at > 0 && at < s.length && s[at] === \"_\") {\n      at++;\n    }\n    let currentMatch = \"\";\n    for (let i = 0; i < facenames.length; i++) {\n      if (\n        s.substr(at).startsWith(facenames[i][1]) &&\n        facenames[i][1].length > currentMatch.length\n      ) {\n        currentMatch = facenames[i][1];\n      }\n    }\n    if (currentMatch !== \"\") {\n      r.push(currentMatch);\n      at += currentMatch.length;\n    } else {\n      throw new Error(\"Could not split \" + s + \" into face names.\");\n    }\n  }\n  return r;\n}\n\nfunction toCoords(q: Quat, maxdist: number): number[] {\n  return [q.b / maxdist, -q.c / maxdist, q.d / maxdist];\n}\n\nfunction toFaceCoords(q: Quat[], maxdist: number): number[][] {\n  const r = [];\n  const n = q.length;\n  for (let i = 0; i < n; i++) {\n    r[n - i - 1] = toCoords(q[i], maxdist);\n  }\n  return r;\n}\n\nfunction trimEdges(face: Quat[], tr: number): Quat[] {\n  const r: Quat[] = [];\n  for (let iter = 1; iter < 10; iter++) {\n    for (let i = 0; i < face.length; i++) {\n      const pi = (i + face.length - 1) % face.length;\n      const ni = (i + 1) % face.length;\n      const A = face[pi].sub(face[i]).normalize();\n      const B = face[ni].sub(face[i]).normalize();\n      const d = A.dot(B);\n      const m = tr / Math.sqrt(1 - d * d);\n      r[i] = face[i].sum(A.sum(B).smul(m));\n    }\n    let good = true;\n    for (let i = 0; good && i < r.length; i++) {\n      const pi = (i + face.length - 1) % face.length;\n      const ni = (i + 1) % face.length;\n      if (r[pi].sub(r[i]).cross(r[ni].sub(r[i])).dot(r[i]) >= 0) {\n        good = false;\n      }\n    }\n    if (good) {\n      return r;\n    }\n    tr /= 2;\n  }\n  return face;\n}\n\nexport class PuzzleGeometry {\n  public args: string = \"\";\n  public rotations: Quat[]; // all members of the rotation group\n  public baseplanerot: Quat[]; // unique rotations of the baseplane\n  public baseplanes: Quat[]; // planes, corresponding to faces\n  public facenames: any[]; // face names\n  public faceplanes: any; // face planes\n  public edgenames: any[]; // edge names\n  public vertexnames: any[]; // vertexnames\n  public geonormals: any[]; // all geometric directions, with names and types\n  public moveplanes: Quat[]; // the planes that split moves\n  public moveplanes2: Quat[]; // the planes that split moves, filtered\n  public moveplanesets: any[]; // the move planes, in parallel sets\n  public moveplanenormals: Quat[]; // one move plane\n  public movesetorders: any[]; // the order of rotations for each move set\n  public movesetgeos: any[]; // geometric feature information for move sets\n  public basefaces: Quat[][]; // polytope faces before cuts\n  public faces: Quat[][]; // all the stickers\n  public facecentermass: Quat[]; // center of mass of all faces\n  public basefacecount: number; // number of base faces\n  public stickersperface: number; // number of stickers per face\n  public cornerfaces: number; // number of faces that meet at a corner\n  public cubies: any[]; // the cubies\n  public shortedge: number; // shortest edge\n  public vertexdistance: number; // vertex distance\n  public edgedistance: number; // edge distance\n  public orbits: number; // count of cubie orbits\n  public facetocubies: any[]; // map a face to a cubie index and offset\n  public moverotations: Quat[][]; // move rotations\n  public cubiekey: any; // cubie locator\n  public cubiekeys: string[]; // cubie keys\n  public facelisthash: any; // face list by key\n  public cubiesetnames: any[]; // cubie set names\n  public cubieords: number[]; // the size of each orbit\n  public cubiesetnums: number[];\n  public cubieordnums: number[];\n  public orbitoris: number[]; // the orientation size of each orbit\n  public cubievaluemap: number[]; // the map for identical cubies\n  public cubiesetcubies: number[][]; // cubies in each cubie set\n  public cmovesbyslice: number[][][] = []; // cmoves as perms by slice\n  // options\n  public verbose: number = 0; // verbosity (console.log)\n  public allmoves: boolean = false; // generate all slice moves in ksolve\n  public outerblockmoves: boolean; // generate outer block moves\n  public vertexmoves: boolean; // generate vertex moves\n  public addrotations: boolean; // add symmetry information to ksolve output\n  public movelist: any; // move list to generate\n  public parsedmovelist: any; // parsed move list\n  public puzzleOrientation: any; // single puzzle orientation from options\n  public puzzleOrientations: any; // puzzle orientation override list from options\n  public cornersets: boolean = true; // include corner sets\n  public centersets: boolean = true; // include center sets\n  public edgesets: boolean = true; // include edge sets\n  public graycorners: boolean = false; // make corner sets gray\n  public graycenters: boolean = false; // make center sets gray\n  public grayedges: boolean = false; // make edge sets gray\n  public killorientation: boolean = false; // eliminate any orientations\n  public optimize: boolean = false; // optimize PermOri\n  public scramble: number = 0; // scramble?\n  public ksolvemovenames: string[]; // move names from ksolve\n  public fixPiece: string = \"\"; // fix a piece?\n  public orientCenters: boolean = false; // orient centers?\n  public duplicatedFaces: number[] = []; // which faces are duplicated\n  public duplicatedCubies: number[] = []; // which cubies are duplicated\n  public fixedCubie: number = -1; // fixed cubie, if any\n  public svggrips: any[]; // grips from svg generation by svg coordinate\n  public net: any = [];\n  public colors: any = [];\n  public faceorder: any = [];\n  public faceprecedence: number[] = [];\n  public swizzler: FaceNameSwizzler;\n  public notationMapper: NotationMapper = new NullMapper();\n  public addNotationMapper: string = \"\";\n  public setReidOrder: boolean = false;\n  constructor(shape: string, cuts: string[][], optionlist: any[] | undefined) {\n    function asstructured(v: any): any {\n      if (typeof v === \"string\") {\n        return JSON.parse(v);\n      }\n      return v;\n    }\n    function asboolean(v: any): boolean {\n      if (typeof v === \"string\") {\n        if (v === \"false\") {\n          return false;\n        }\n        return true;\n      } else {\n        return v ? true : false;\n      }\n    }\n    if (optionlist !== undefined) {\n      if (optionlist.length % 2 !== 0) {\n        throw new Error(\"Odd length in option list?\");\n      }\n      for (let i = 0; i < optionlist.length; i += 2) {\n        if (optionlist[i] === \"verbose\") {\n          this.verbose++;\n        } else if (optionlist[i] === \"quiet\") {\n          this.verbose = 0;\n        } else if (optionlist[i] === \"allmoves\") {\n          this.allmoves = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"outerblockmoves\") {\n          this.outerblockmoves = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"vertexmoves\") {\n          this.vertexmoves = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"rotations\") {\n          this.addrotations = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"cornersets\") {\n          this.cornersets = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"centersets\") {\n          this.centersets = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"edgesets\") {\n          this.edgesets = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"graycorners\") {\n          this.graycorners = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"graycenters\") {\n          this.graycenters = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"grayedges\") {\n          this.grayedges = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"movelist\") {\n          this.movelist = asstructured(optionlist[i + 1]);\n        } else if (optionlist[i] === \"killorientation\") {\n          this.killorientation = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"optimize\") {\n          this.optimize = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"scramble\") {\n          this.scramble = optionlist[i + 1];\n        } else if (optionlist[i] === \"fix\") {\n          this.fixPiece = optionlist[i + 1];\n        } else if (optionlist[i] === \"orientcenters\") {\n          this.orientCenters = asboolean(optionlist[i + 1]);\n        } else if (optionlist[i] === \"puzzleorientation\") {\n          this.puzzleOrientation = asstructured(optionlist[i + 1]);\n        } else if (optionlist[i] === \"puzzleorientations\") {\n          this.puzzleOrientations = asstructured(optionlist[i + 1]);\n        } else {\n          throw new Error(\n            \"Bad option while processing option list \" + optionlist[i],\n          );\n        }\n      }\n    }\n    this.args = shape + \" \" + cuts.map((_) => _.join(\" \")).join(\" \");\n    if (optionlist) {\n      this.args += \" \" + optionlist.join(\" \");\n    }\n    if (this.verbose > 0) {\n      console.log(this.header(\"# \"));\n    }\n    this.create(shape, cuts);\n  }\n\n  public create(shape: string, cuts: any[]): void {\n    // create the shape, doing all the essential geometry\n    // create only goes far enough to figure out how many stickers per\n    // face, and what the short edge is.  If the short edge is too short,\n    // we probably don't want to display or manipulate this one.  How\n    // short is too short is hard to say.\n    // var that = this ; // TODO\n    this.moveplanes = [];\n    this.moveplanes2 = [];\n    this.faces = [];\n    this.cubies = [];\n    let g = null;\n    switch (shape) {\n      case \"c\":\n        g = cube();\n        break;\n      case \"o\":\n        g = octahedron();\n        break;\n      case \"i\":\n        g = icosahedron();\n        break;\n      case \"t\":\n        g = tetrahedron();\n        break;\n      case \"d\":\n        g = dodecahedron();\n        break;\n      default:\n        throw new Error(\"Bad shape argument: \" + shape);\n    }\n    this.rotations = closure(g);\n    if (this.verbose) {\n      console.log(\"# Rotations: \" + this.rotations.length);\n    }\n    const baseplane = g[0];\n    this.baseplanerot = uniqueplanes(baseplane, this.rotations);\n    const baseplanes = this.baseplanerot.map((_) => baseplane.rotateplane(_));\n    this.baseplanes = baseplanes;\n    this.basefacecount = baseplanes.length;\n    const net = defaultnets()[baseplanes.length];\n    this.net = net;\n    this.colors = defaultcolors()[baseplanes.length];\n    this.faceorder = defaultfaceorders()[baseplanes.length];\n    if (this.verbose) {\n      console.log(\"# Base planes: \" + baseplanes.length);\n    }\n    const baseface = getface(baseplanes);\n    const zero = new Quat(0, 0, 0, 0);\n    if (this.verbose) {\n      console.log(\"# Face vertices: \" + baseface.length);\n    }\n    const facenormal = baseplanes[0].makenormal();\n    const edgenormal = baseface[0].sum(baseface[1]).makenormal();\n    const vertexnormal = baseface[0].makenormal();\n    const boundary = new Quat(1, facenormal.b, facenormal.c, facenormal.d);\n    if (this.verbose) {\n      console.log(\"# Boundary is \" + boundary);\n    }\n    const planerot = uniqueplanes(boundary, this.rotations);\n    const planes = planerot.map((_) => boundary.rotateplane(_));\n    let faces = [getface(planes)];\n    this.edgedistance = faces[0][0].sum(faces[0][1]).smul(0.5).dist(zero);\n    this.vertexdistance = faces[0][0].dist(zero);\n    const cutplanes = [];\n    const intersects = [];\n    let sawface = false; // what cuts did we see?\n    let sawedge = false;\n    let sawvertex = false;\n    for (let i = 0; i < cuts.length; i++) {\n      let normal = null;\n      let distance = 0;\n      switch (cuts[i][0]) {\n        case \"f\":\n          normal = facenormal;\n          distance = 1;\n          sawface = true;\n          break;\n        case \"v\":\n          normal = vertexnormal;\n          distance = this.vertexdistance;\n          sawvertex = true;\n          break;\n        case \"e\":\n          normal = edgenormal;\n          distance = this.edgedistance;\n          sawedge = true;\n          break;\n        default:\n          throw new Error(\"Bad cut argument: \" + cuts[i][0]);\n      }\n      cutplanes.push(normal.makecut(Number(cuts[i][1])));\n      intersects.push(cuts[i][1] < distance);\n    }\n    if (this.addrotations) {\n      if (!sawface) {\n        cutplanes.push(facenormal.makecut(10));\n      }\n      if (!sawvertex) {\n        cutplanes.push(vertexnormal.makecut(10));\n      }\n      if (!sawedge) {\n        cutplanes.push(edgenormal.makecut(10));\n      }\n    }\n    this.basefaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(faces[0]);\n      this.basefaces.push(face);\n    }\n    //\n    //   Determine names for edges, vertices, and planes.  Planes are defined\n    //   by the plane normal/distance; edges are defined by the midpoint;\n    //   vertices are defined by actual point.  In each case we define a name.\n    //   Note that edges have two potential names, and corners have n where\n    //   n planes meet at a vertex.  We arbitrarily choose the one that is\n    //   alphabetically first (and we will probably want to change this).\n    //\n    const facenames: any[] = [];\n    const faceplanes = [];\n    const vertexnames: any[] = [];\n    const edgenames: any[] = [];\n    const edgesperface = faces[0].length;\n    function searchaddelement(a: any[], p: Quat, name: any): void {\n      for (let i = 0; i < a.length; i++) {\n        if (a[i][0].dist(p) < eps) {\n          a[i].push(name);\n          return;\n        }\n      }\n      a.push([p, name]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(faces[0]);\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        searchaddelement(edgenames, midpoint, i);\n      }\n    }\n    const otherfaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(faces[0]);\n      const facelist = [];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const el = edgenames[findelement(edgenames, midpoint)];\n        if (i === el[1]) {\n          facelist.push(el[2]);\n        } else if (i === el[2]) {\n          facelist.push(el[1]);\n        } else {\n          throw new Error(\"Could not find edge\");\n        }\n      }\n      otherfaces.push(facelist);\n    }\n    const facenametoindex: any = {};\n    const faceindextoname: any = [];\n    faceindextoname.push(net[0][0]);\n    facenametoindex[net[0][0]] = 0;\n    faceindextoname[otherfaces[0][0]] = net[0][1];\n    facenametoindex[net[0][1]] = otherfaces[0][0];\n    for (let i = 0; i < net.length; i++) {\n      const f0 = net[i][0];\n      const fi = facenametoindex[f0];\n      if (fi === undefined) {\n        throw new Error(\"Bad edge description; first edge not connected\");\n      }\n      let ii = -1;\n      for (let j = 0; j < otherfaces[fi].length; j++) {\n        const fn2 = faceindextoname[otherfaces[fi][j]];\n        if (fn2 !== undefined && fn2 === net[i][1]) {\n          ii = j;\n          break;\n        }\n      }\n      if (ii < 0) {\n        throw new Error(\"First element of a net not known\");\n      }\n      for (let j = 2; j < net[i].length; j++) {\n        if (net[i][j] === \"\") {\n          continue;\n        }\n        const of = otherfaces[fi][(j + ii - 1) % edgesperface];\n        const fn2 = faceindextoname[of];\n        if (fn2 !== undefined && fn2 !== net[i][j]) {\n          throw new Error(\"Face mismatch in net\");\n        }\n        faceindextoname[of] = net[i][j];\n        facenametoindex[net[i][j]] = of;\n      }\n    }\n    for (let i = 0; i < faceindextoname.length; i++) {\n      let found = false;\n      for (let j = 0; j < this.faceorder.length; j++) {\n        if (faceindextoname[i] === this.faceorder[j]) {\n          this.faceprecedence[i] = j;\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new Error(\n          \"Could not find face \" +\n            faceindextoname[i] +\n            \" in face order list \" +\n            this.faceorder,\n        );\n      }\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(faces[0]);\n      const faceplane = boundary.rotateplane(this.baseplanerot[i]);\n      const facename = faceindextoname[i];\n      facenames.push([face, facename]);\n      faceplanes.push([faceplane, facename]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(faces[0]);\n      const facename = faceindextoname[i];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const jjj = (j + 2) % face.length;\n        const midpoint2 = face[jj].sum(face[jjj]).smul(0.5);\n        const e1 = findelement(edgenames, midpoint);\n        const e2 = findelement(edgenames, midpoint2);\n        searchaddelement(vertexnames, face[jj], [facename, e2, e1]);\n      }\n    }\n    this.swizzler = new FaceNameSwizzler(facenames.map((_: any) => _[1]));\n    const sep = this.swizzler.prefixFree ? \"\" : \"_\";\n    // fix the edge names; use face precedence order\n    for (let i = 0; i < edgenames.length; i++) {\n      if (edgenames[i].length !== 3) {\n        throw new Error(\"Bad length in edge names \" + edgenames[i]);\n      }\n      let c1 = faceindextoname[edgenames[i][1]];\n      const c2 = faceindextoname[edgenames[i][2]];\n      if (\n        this.faceprecedence[edgenames[i][1]] <\n        this.faceprecedence[edgenames[i][2]]\n      ) {\n        c1 = c1 + sep + c2;\n      } else {\n        c1 = c2 + sep + c1;\n      }\n      edgenames[i] = [edgenames[i][0], c1];\n    }\n    // fix the vertex names; counterclockwise rotations; low face first.\n    this.cornerfaces = vertexnames[0].length - 1;\n    for (let i = 0; i < vertexnames.length; i++) {\n      if (vertexnames[i].length < 4) {\n        throw new Error(\"Bad length in vertex names\");\n      }\n      let st = 1;\n      for (let j = 2; j < vertexnames[i].length; j++) {\n        if (\n          this.faceprecedence[facenametoindex[vertexnames[i][j][0]]] <\n          this.faceprecedence[facenametoindex[vertexnames[i][st][0]]]\n        ) {\n          st = j;\n        }\n      }\n      let r = \"\";\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (j === 1) {\n          r = vertexnames[i][st][0];\n        } else {\n          r = r + sep + vertexnames[i][st][0];\n        }\n        for (let k = 1; k < vertexnames[i].length; k++) {\n          if (vertexnames[i][st][1] === vertexnames[i][k][2]) {\n            st = k;\n            break;\n          }\n        }\n      }\n      vertexnames[i] = [vertexnames[i][0], r];\n    }\n    if (this.verbose > 1) {\n      console.log(\"# Face precedence list: \" + this.faceorder.join(\" \"));\n      console.log(\"# Face names: \" + facenames.map((_: any) => _[1]).join(\" \"));\n      console.log(\"# Edge names: \" + edgenames.map((_: any) => _[1]).join(\" \"));\n      console.log(\n        \"# Vertex names: \" + vertexnames.map((_: any) => _[1]).join(\" \"),\n      );\n    }\n    const geonormals = [];\n    for (let i = 0; i < faceplanes.length; i++) {\n      geonormals.push([faceplanes[i][0].makenormal(), faceplanes[i][1], \"f\"]);\n    }\n    for (let i = 0; i < edgenames.length; i++) {\n      geonormals.push([edgenames[i][0].makenormal(), edgenames[i][1], \"e\"]);\n    }\n    for (let i = 0; i < vertexnames.length; i++) {\n      geonormals.push([vertexnames[i][0].makenormal(), vertexnames[i][1], \"v\"]);\n    }\n    this.facenames = facenames;\n    this.faceplanes = faceplanes;\n    this.edgenames = edgenames;\n    this.vertexnames = vertexnames;\n    this.geonormals = geonormals;\n    const geonormalnames = geonormals.map((_: any) => _[1]);\n    this.swizzler.setGripNames(geonormalnames);\n    if (this.verbose) {\n      console.log(\n        \"# Distances: face \" +\n          1 +\n          \" edge \" +\n          this.edgedistance +\n          \" vertex \" +\n          this.vertexdistance,\n      );\n    }\n    // expand cutplanes by rotations.  We only work with one face here.\n    for (let c = 0; c < cutplanes.length; c++) {\n      for (let i = 0; i < this.rotations.length; i++) {\n        const q = cutplanes[c].rotateplane(this.rotations[i]);\n        let wasseen = false;\n        for (let j = 0; j < this.moveplanes.length; j++) {\n          if (q.sameplane(this.moveplanes[j])) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          this.moveplanes.push(q);\n          if (intersects[c]) {\n            this.moveplanes2.push(q);\n          }\n        }\n      }\n    }\n    let ft = new FaceTree(faces[0]);\n    const tar = this.moveplanes2.slice();\n    // we want to use Math.random() here but we can't, because when\n    // we call multiple times we'll get different orbits/layouts.\n    // to resolve this, we use a very simple linear congruential\n    // generator.  for our purposes, the numbers don't need to be\n    // very random.\n    let rval = 31;\n    for (let i = 0; i < tar.length; i++) {\n      const j = i + Math.floor((tar.length - i) * (rval / 65536.0));\n      ft = ft.split(tar[j]);\n      tar[j] = tar[i];\n      rval = (rval * 1657 + 101) % 65536;\n    }\n    faces = ft.collect([], true);\n    this.faces = faces;\n    if (this.verbose) {\n      console.log(\"# Faces is now \" + faces.length);\n    }\n    this.stickersperface = faces.length;\n    //  Find and report the shortest edge in any of the faces.  If this\n    //  is small the puzzle is probably not practical or displayable.\n    let shortedge = 1e99;\n    for (let i = 0; i < faces.length; i++) {\n      for (let j = 0; j < faces[i].length; j++) {\n        const k = (j + 1) % faces[i].length;\n        const t = faces[i][j].dist(faces[i][k]);\n        if (t < shortedge) {\n          shortedge = t;\n        }\n      }\n    }\n    this.shortedge = shortedge;\n    if (this.verbose) {\n      console.log(\"# Short edge is \" + shortedge);\n    }\n    // add nxnxn cube notation if it has cube face moves\n    if (shape === \"c\" && sawface && !sawedge && !sawvertex) {\n      // In this case the mapper adding is deferred until we\n      // know the number of slices.\n      this.addNotationMapper = \"NxNxNCubeMapper\";\n      // try to set Reid order of the cubies within an orbit\n      this.setReidOrder = true;\n    }\n    if (shape === \"c\" && sawvertex && !sawface && !sawedge) {\n      this.addNotationMapper = \"SkewbMapper\";\n    }\n    if (shape === \"t\" && (sawvertex || sawface) && !sawedge) {\n      this.addNotationMapper = \"PyraminxMapper\";\n    }\n    if (shape === \"o\" && sawface && NEW_FACE_NAMES) {\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\"F\", \"D\", \"L\", \"BL\", \"R\", \"U\", \"BR\", \"B\"]),\n      );\n      if (!sawedge && !sawvertex) {\n        this.addNotationMapper = \"FTOMapper\";\n      }\n    }\n    if (shape === \"d\" && sawface && NEW_FACE_NAMES) {\n      this.addNotationMapper = \"MegaminxMapper\";\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\n          \"U\",\n          \"F\",\n          \"L\",\n          \"BL\",\n          \"BR\",\n          \"R\",\n          \"FR\",\n          \"FL\",\n          \"DL\",\n          \"B\",\n          \"DR\",\n          \"D\",\n        ]),\n      );\n    }\n  }\n\n  public keyface(face: Quat[]): string {\n    return this.keyface2(centermassface(face));\n  }\n\n  public keyface2(cm: Quat): string {\n    // take a face and figure out the sides of each move plane\n    let s = \"\";\n    for (let i = 0; i < this.moveplanesets.length; i++) {\n      if (this.moveplanesets[i].length > 0) {\n        const dv = cm.dot(this.moveplanesets[i][0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= this.moveplanesets[i].length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (\n            t + b <= this.moveplanesets[i].length &&\n            dv > this.moveplanesets[i][t + b - 1].a\n          ) {\n            t += b;\n          }\n        }\n        s = s + \" \" + t;\n      }\n    }\n    return s;\n  }\n\n  public findface(face: Quat[]): number {\n    const cm = centermassface(face);\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash[key];\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash[key][i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  public findface2(cm: Quat): number {\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash[key];\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash[key][i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  public project2d(facen: number, edgen: number, targvec: Quat[]): any {\n    // calculate geometry to map a particular edge of a particular\n    //  face to a given 2D vector.  The face is given as an index into the\n    //  facenames/baseplane arrays, and the edge is given as an offset into\n    //  the vertices.\n    const face = this.facenames[facen][0];\n    const edgen2 = (edgen + 1) % face.length;\n    const plane = this.baseplanes[facen];\n    let x0 = face[edgen2].sub(face[edgen]);\n    const olen = x0.len();\n    x0 = x0.normalize();\n    const y0 = x0.cross(plane).normalize();\n    let delta = targvec[1].sub(targvec[0]);\n    const len = delta.len() / olen;\n    delta = delta.normalize();\n    const cosr = delta.b;\n    const sinr = delta.c;\n    const x1 = x0.smul(cosr).sub(y0.smul(sinr)).smul(len);\n    const y1 = y0.smul(cosr).sum(x0.smul(sinr)).smul(len);\n    const off = new Quat(\n      0,\n      targvec[0].b - x1.dot(face[edgen]),\n      targvec[0].c - y1.dot(face[edgen]),\n      0,\n    );\n    return [x1, y1, off];\n  }\n\n  public allstickers(): void {\n    // next step is to calculate all the stickers and orbits\n    // We do enough work here to display the cube on the screen.\n    // take our newly split base face and expand it by the rotation matrix.\n    // this generates our full set of \"stickers\".\n    this.faces = expandfaces(this.baseplanerot, this.faces);\n    if (this.verbose) {\n      console.log(\"# Total stickers is now \" + this.faces.length);\n    }\n    this.facecentermass = new Array(this.faces.length);\n    for (let i = 0; i < this.faces.length; i++) {\n      this.facecentermass[i] = centermassface(this.faces[i]);\n    }\n    // Split moveplanes into a list of parallel planes.\n    const moveplanesets: Quat[][] = [];\n    const moveplanenormals: Quat[] = [];\n    // get the normals, first, from unfiltered moveplanes.\n    for (let i = 0; i < this.moveplanes.length; i++) {\n      const q = this.moveplanes[i];\n      const qnormal = q.makenormal();\n      let wasseen = false;\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j].makenormal())) {\n          wasseen = true;\n        }\n      }\n      if (!wasseen) {\n        moveplanenormals.push(qnormal);\n        moveplanesets.push([]);\n      }\n    }\n    for (let i = 0; i < this.moveplanes2.length; i++) {\n      const q = this.moveplanes2[i];\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moveplanesets[j].push(q);\n          break;\n        }\n      }\n    }\n    // make the normals all face the same way in each set.\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const q: Quat[] = moveplanesets[i].map((_) => _.normalizeplane());\n      const goodnormal = moveplanenormals[i];\n      for (let j = 0; j < q.length; j++) {\n        if (q[j].makenormal().dist(goodnormal) > eps) {\n          q[j] = q[j].smul(-1);\n        }\n      }\n      q.sort((a, b) => a.a - b.a);\n      moveplanesets[i] = q;\n    }\n    this.moveplanesets = moveplanesets;\n    this.moveplanenormals = moveplanenormals;\n    const sizes = moveplanesets.map((_) => _.length);\n    if (this.verbose) {\n      console.log(\"# Move plane sets: \" + sizes);\n    }\n    // for each of the move planes, find the rotations that are relevant\n    const moverotations: Quat[][] = [];\n    for (let i = 0; i < moveplanesets.length; i++) {\n      moverotations.push([]);\n    }\n    for (let i = 0; i < this.rotations.length; i++) {\n      const q: Quat = this.rotations[i];\n      if (Math.abs(Math.abs(q.a) - 1) < eps) {\n        continue;\n      }\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanesets.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moverotations[j].push(q);\n          break;\n        }\n      }\n    }\n    this.moverotations = moverotations;\n    //  Sort the rotations by the angle of rotation.  A bit tricky because\n    //  while the norms should be the same, they need not be.  So we start\n    //  by making the norms the same, and then sorting.\n    for (let i = 0; i < moverotations.length; i++) {\n      const r = moverotations[i];\n      const goodnormal = r[0].makenormal();\n      for (let j = 0; j < r.length; j++) {\n        if (goodnormal.dist(r[j].makenormal()) > eps) {\n          r[j] = r[j].smul(-1);\n        }\n      }\n      r.sort((a, b) => a.angle() - b.angle());\n      if (moverotations[i][0].dot(moveplanenormals[i]) < 0) {\n        r.reverse();\n      }\n    }\n    const sizes2 = moverotations.map((_) => 1 + _.length);\n    this.movesetorders = sizes2;\n    const movesetgeos = [];\n    let gtype = \"?\";\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const p0 = moveplanenormals[i];\n      let neg = null;\n      let pos = null;\n      for (let j = 0; j < this.geonormals.length; j++) {\n        const d = p0.dot(this.geonormals[j][0]);\n        if (Math.abs(d - 1) < eps) {\n          pos = [this.geonormals[j][1], this.geonormals[j][2]];\n          gtype = this.geonormals[j][2];\n        } else if (Math.abs(d + 1) < eps) {\n          neg = [this.geonormals[j][1], this.geonormals[j][2]];\n          gtype = this.geonormals[j][2];\n        }\n      }\n      if (pos === null || neg === null) {\n        throw new Error(\"Saw positive or negative sides as null\");\n      }\n      movesetgeos.push([\n        pos[0],\n        pos[1],\n        neg[0],\n        neg[1],\n        1 + moveplanesets[i].length,\n      ]);\n      if (this.addNotationMapper === \"NxNxNCubeMapper\" && gtype === \"f\") {\n        this.notationMapper = new NxNxNCubeMapper(1 + moveplanesets[i].length);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"SkewbMapper---DISABLED\" &&\n        moveplanesets[0].length === 1\n      ) {\n        this.notationMapper = new SkewbNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"PyraminxMapper---DISABLED\" &&\n        moveplanesets[0].length === 2\n      ) {\n        this.notationMapper = new PyraminxNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"MegaminxMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new MegaminxScramblingNotationMapper(\n            this.notationMapper,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"FTOMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new FTONotationMapper(\n            this.notationMapper,\n            this.swizzler,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n    }\n    this.movesetgeos = movesetgeos;\n    //  Cubies are split by move plane sets.  For each cubie we can\n    //  average its points to find a point on the interior of that\n    //  cubie.  We can then check that point against all the move\n    //  planes and from that derive a coordinate for the cubie.\n    //  This also works for faces; no face should ever lie on a move\n    //  plane.  This allows us to take a set of stickers and break\n    //  them up into cubie sets.\n    const cubiehash: any = {};\n    const facelisthash: any = {};\n    const cubiekey: any = {};\n    const cubiekeys = [];\n    const cubies: Quat[][][] = [];\n    const faces = this.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      const s = this.keyface(face);\n      if (!cubiehash[s]) {\n        cubiekey[s] = cubies.length;\n        cubiekeys.push(s);\n        cubiehash[s] = [];\n        facelisthash[s] = [];\n        cubies.push(cubiehash[s]);\n      }\n      facelisthash[s].push(i);\n      cubiehash[s].push(face);\n      //  If we find a core cubie, split it up into multiple cubies,\n      //  because ksolve doesn't handle orientations that are not\n      //  cyclic, and the rotation group of the core is not cyclic.\n      if (facelisthash[s].length === this.basefacecount) {\n        if (this.verbose) {\n          console.log(\"# Splitting core.\");\n        }\n        for (let suff = 0; suff < this.basefacecount; suff++) {\n          const s2 = s + \" \" + suff;\n          facelisthash[s2] = [facelisthash[s][suff]];\n          cubiehash[s2] = [cubiehash[s][suff]];\n          cubiekeys.push(s2);\n          cubiekey[s2] = cubies.length;\n          cubies.push(cubiehash[s2]);\n        }\n        cubiehash[s] = [];\n        cubies[cubiekey[s]] = [];\n      }\n    }\n    this.cubiekey = cubiekey;\n    this.facelisthash = facelisthash;\n    this.cubiekeys = cubiekeys;\n    if (this.verbose) {\n      console.log(\"# Cubies: \" + Object.keys(cubiehash).length);\n    }\n    //  Sort the faces around each corner so they are counterclockwise.  Only\n    //  relevant for cubies that actually are corners (three or more\n    //  faces).  In general cubies might have many faces; for icosohedrons\n    //  there are five faces on the corner cubies.\n    this.cubies = cubies;\n    for (let k = 0; k < cubies.length; k++) {\n      const cubie = cubies[k];\n      if (cubie.length < 2) {\n        continue;\n      }\n      if (cubie.length === this.basefacecount) {\n        // looks like core?  don't sort\n        continue;\n      }\n      if (cubie.length > 5) {\n        throw new Error(\n          \"Bad math; too many faces on this cubie \" + cubie.length,\n        );\n      }\n      const cm = cubie.map((_) => centermassface(_));\n      const s = this.keyface2(cm[0]);\n      const facelist = facelisthash[s];\n      const cmall = centermassface(cm);\n      for (let looplimit = 0; cubie.length > 2; looplimit++) {\n        let changed = false;\n        for (let i = 0; i < cubie.length; i++) {\n          const j = (i + 1) % cubie.length;\n          // var ttt = cmall.dot(cm[i].cross(cm[j])) ; // TODO\n          if (cmall.dot(cm[i].cross(cm[j])) < 0) {\n            const t = cubie[i];\n            cubie[i] = cubie[j];\n            cubie[j] = t;\n            const u = cm[i];\n            cm[i] = cm[j];\n            cm[j] = u;\n            const v = facelist[i];\n            facelist[i] = facelist[j];\n            facelist[j] = v;\n            changed = true;\n          }\n        }\n        if (!changed) {\n          break;\n        }\n        if (looplimit > 1000) {\n          throw new Error(\"Bad epsilon math; too close to border\");\n        }\n      }\n      let mini = 0;\n      let minf = this.findface(cubie[mini]);\n      for (let i = 1; i < cubie.length; i++) {\n        const temp = this.findface(cubie[i]);\n        if (\n          this.faceprecedence[this.getfaceindex(temp)] <\n          this.faceprecedence[this.getfaceindex(minf)]\n        ) {\n          mini = i;\n          minf = temp;\n        }\n      }\n      if (mini !== 0) {\n        const ocubie = cubie.slice();\n        const ofacelist = facelist.slice();\n        for (let i = 0; i < cubie.length; i++) {\n          cubie[i] = ocubie[(mini + i) % cubie.length];\n          facelist[i] = ofacelist[(mini + i) % cubie.length];\n        }\n      }\n    }\n    //  Build an array that takes each face to a cubie ordinal and a\n    //  face number.\n    const facetocubies = [];\n    for (let i = 0; i < cubies.length; i++) {\n      const facelist = facelisthash[cubiekeys[i]];\n      for (let j = 0; j < facelist.length; j++) {\n        facetocubies[facelist[j]] = [i, j];\n      }\n    }\n    this.facetocubies = facetocubies;\n    //  Calculate the orbits of each cubie.  Assumes we do all moves.\n    //  Also calculates which cubies are identical.\n    const typenames = [\"?\", \"CENTERS\", \"EDGES\", \"CORNERS\", \"C4RNER\", \"C5RNER\"];\n    const cubiesetnames = [];\n    const cubietypecounts = [0, 0, 0, 0, 0, 0];\n    const orbitoris = [];\n    const seen = [];\n    let cubiesetnum = 0;\n    const cubiesetnums = [];\n    const cubieordnums = [];\n    const cubieords = [];\n    // var cubiesetnumhash = {} ; // TODO\n    const cubievaluemap = [];\n    // Later we will make this smarter to use a get color for face function\n    // so we support puzzles with multiple faces the same color\n    const getcolorkey = (cubienum: number): string => {\n      return cubies[cubienum]\n        .map((_) => this.getfaceindex(this.findface(_)))\n        .join(\" \");\n    };\n    const cubiesetcubies: any = [];\n    for (let i = 0; i < cubies.length; i++) {\n      if (seen[i]) {\n        continue;\n      }\n      const cubie = cubies[i];\n      if (cubie.length === 0) {\n        continue;\n      }\n      const cubiekeymap: any = {};\n      let cubievalueid = 0;\n      cubieords.push(0);\n      cubiesetcubies.push([]);\n      const facecnt = cubie.length;\n      const typectr = cubietypecounts[facecnt]++;\n      let typename = typenames[facecnt];\n      if (typename === undefined || facecnt === this.basefacecount) {\n        typename = \"CORE\";\n      }\n      typename = typename + (typectr === 0 ? \"\" : typectr + 1);\n      cubiesetnames[cubiesetnum] = typename;\n      orbitoris[cubiesetnum] = facecnt;\n      const queue = [i];\n      let qg = 0;\n      seen[i] = true;\n      while (qg < queue.length) {\n        const cind = queue[qg++];\n        const cubiecolorkey = getcolorkey(cind);\n        if (cubie.length > 1 || cubiekeymap[cubiecolorkey] === undefined) {\n          cubiekeymap[cubiecolorkey] = cubievalueid++;\n        }\n        cubievaluemap[cind] = cubiekeymap[cubiecolorkey];\n        cubiesetnums[cind] = cubiesetnum;\n        cubiesetcubies[cubiesetnum].push(cind);\n        cubieordnums[cind] = cubieords[cubiesetnum]++;\n        const cm = centermassface(cubies[cind][0]);\n        if (queue.length < this.rotations.length) {\n          for (let j = 0; j < moverotations.length; j++) {\n            const tq = this.facetocubies[\n              this.findface2(cm.rotatepoint(moverotations[j][0]))\n            ][0];\n            if (!seen[tq]) {\n              queue.push(tq);\n              seen[tq] = true;\n            }\n          }\n        }\n      }\n      cubiesetnum++;\n    }\n    if (\n      this.setReidOrder &&\n      4 <= this.stickersperface &&\n      this.stickersperface <= 9\n    ) {\n      const reidorder = [\n        [\n          \"UF\",\n          \"UR\",\n          \"UB\",\n          \"UL\",\n          \"DF\",\n          \"DR\",\n          \"DB\",\n          \"DL\",\n          \"FR\",\n          \"FL\",\n          \"BR\",\n          \"BL\",\n        ],\n        [\"UFR\", \"URB\", \"UBL\", \"ULF\", \"DRF\", \"DFL\", \"DLB\", \"DBR\"],\n        [\"U\", \"L\", \"F\", \"R\", \"B\", \"D\"],\n      ];\n      const reidmap: { [key: number]: number } = {};\n      for (let i = 0; i < reidorder.length; i++) {\n        for (let j = 0; j < reidorder[i].length; j++) {\n          let mask = 0;\n          for (let k = 0; k < reidorder[i][j].length; k++) {\n            mask |= 1 << (reidorder[i][j].charCodeAt(k) - 65);\n          }\n          reidmap[mask] = j;\n        }\n      }\n      for (let i = 0; i < cubiesetnum; i++) {\n        for (let j = 0; j < cubiesetcubies[i].length; j++) {\n          const cubienum = cubiesetcubies[i][j];\n          let mask = 0;\n          for (let k = 0; k < cubies[cubienum].length; k++) {\n            mask |=\n              1 <<\n              (this.facenames[\n                this.getfaceindex(this.findface(cubies[cubienum][k]))\n              ][1].charCodeAt(0) -\n                65);\n          }\n          cubieordnums[cubienum] = reidmap[mask];\n        }\n      }\n    }\n    this.orbits = cubieords.length;\n    this.cubiesetnums = cubiesetnums;\n    this.cubieordnums = cubieordnums;\n    this.cubiesetnames = cubiesetnames;\n    this.cubieords = cubieords;\n    this.orbitoris = orbitoris;\n    this.cubievaluemap = cubievaluemap;\n    this.cubiesetcubies = cubiesetcubies;\n    // if we fix a cubie, find a cubie to fix\n    if (this.fixPiece !== \"\") {\n      for (let i = 0; i < cubies.length; i++) {\n        if (\n          (this.fixPiece === \"v\" && cubies[i].length > 2) ||\n          (this.fixPiece === \"e\" && cubies[i].length === 2) ||\n          (this.fixPiece === \"f\" && cubies[i].length === 1)\n        ) {\n          this.fixedCubie = i;\n          break;\n        }\n      }\n      if (this.fixedCubie < 0) {\n        throw new Error(\n          \"Could not find a cubie of type \" + this.fixPiece + \" to fix.\",\n        );\n      }\n    }\n    // show the orbits\n    if (this.verbose) {\n      console.log(\"# Cubie orbit sizes \" + cubieords);\n    }\n  }\n\n  public unswizzle(mv: Move): string {\n    const newmv = this.notationMapper.notationToInternal(mv);\n    if (newmv === null) {\n      return \"\";\n    }\n    return this.swizzler.unswizzle(newmv.family);\n  }\n\n  // We use an extremely permissive parse here; any character but\n  // digits are allowed in a family name.\n  public stringToBlockMove(mv: string): Move {\n    // parse a move from the command line\n    const re = RegExp(\"^(([0-9]+)-)?([0-9]+)?([^0-9]+)([0-9]+'?)?$\");\n    const p = mv.match(re);\n    if (p === null) {\n      throw new Error(\"Bad move passed \" + mv);\n    }\n    const grip = p[4];\n    let loslice = undefined;\n    let hislice = undefined;\n    if (p[2] !== undefined) {\n      if (p[3] === undefined) {\n        throw new Error(\"Missing second number in range\");\n      }\n      loslice = parseInt(p[2], 10);\n    }\n    if (p[3] !== undefined) {\n      hislice = parseInt(p[3], 10);\n    }\n    let amountstr = \"1\";\n    let amount = 1;\n    if (p[5] !== undefined) {\n      amountstr = p[5];\n      if (amountstr[0] === \"'\") {\n        amountstr = \"-\" + amountstr.substring(1);\n      }\n      amount = parseInt(amountstr, 10);\n    }\n    return new Move(new QuantumMove(grip, hislice, loslice), amount);\n  }\n\n  public parseMove(move: Move): any {\n    const bm = this.notationMapper.notationToInternal(move); // pluggable notation\n    if (bm === null) {\n      throw new Error(\"Bad move \" + move.family);\n    }\n    move = bm;\n    let grip = move.family;\n    let fullrotation = false;\n    if (grip.endsWith(\"v\") && grip[0] <= \"Z\") {\n      if (move.innerLayer !== undefined || move.outerLayer !== undefined) {\n        throw new Error(\"Cannot use a prefix with full cube rotations\");\n      }\n      grip = grip.slice(0, -1);\n      fullrotation = true;\n    }\n    if (grip.endsWith(\"w\") && grip[0] <= \"Z\") {\n      grip = grip.slice(0, -1).toLowerCase();\n    }\n    let geo;\n    let msi = -1;\n    const geoname = this.swizzler.unswizzle(grip);\n    let firstgrip = false;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const g = this.movesetgeos[i];\n      if (geoname === g[0]) {\n        firstgrip = true;\n        geo = g;\n        msi = i;\n      }\n      if (geoname === g[2]) {\n        firstgrip = false;\n        geo = g;\n        msi = i;\n      }\n    }\n    let loslice = 1;\n    let hislice = 1;\n    if (grip.toUpperCase() !== grip) {\n      hislice = 2;\n    }\n    if (geo === undefined) {\n      throw new Error(\"Bad grip in move \" + move.family);\n    }\n    if (move.outerLayer !== undefined) {\n      loslice = move.outerLayer;\n    }\n    if (move.innerLayer !== undefined) {\n      if (move.outerLayer === undefined) {\n        hislice = move.innerLayer;\n        if (geoname === grip) {\n          loslice = hislice;\n        } else {\n          loslice = 1;\n        }\n      } else {\n        hislice = move.innerLayer;\n      }\n    }\n    loslice--;\n    hislice--;\n    if (fullrotation) {\n      loslice = 0;\n      hislice = this.moveplanesets[msi].length;\n    }\n    if (\n      loslice < 0 ||\n      loslice > this.moveplanesets[msi].length ||\n      hislice < 0 ||\n      hislice > this.moveplanesets[msi].length\n    ) {\n      throw new Error(\"Bad slice spec \" + loslice + \" \" + hislice);\n    }\n    if (\n      !permissivieMoveParsing &&\n      loslice === 0 &&\n      hislice === this.moveplanesets[msi].length &&\n      !fullrotation\n    ) {\n      throw new Error(\n        \"! full puzzle rotations must be specified with v suffix.\",\n      );\n    }\n    const r = [\n      undefined,\n      msi,\n      loslice,\n      hislice,\n      firstgrip,\n      move.effectiveAmount,\n    ];\n    return r;\n  }\n\n  public parsemove(mv: string): any {\n    const r = this.parseMove(this.stringToBlockMove(mv));\n    r[0] = mv;\n    return r;\n  }\n\n  public genperms(): void {\n    // generate permutations for moves\n    if (this.cmovesbyslice.length > 0) {\n      // did this already?\n      return;\n    }\n    const cmovesbyslice = [];\n    // if orientCenters is set, we find all cubies that have only one\n    // sticker and that sticker is in the center of a face, and we\n    // introduce duplicate stickers so we can orient them properly.\n    if (this.orientCenters) {\n      for (let k = 0; k < this.cubies.length; k++) {\n        if (this.cubies[k].length === 1) {\n          const kk = this.findface(this.cubies[k][0]);\n          const i = this.getfaceindex(kk);\n          if (\n            centermassface(this.basefaces[i]).dist(this.facecentermass[kk]) <\n            eps\n          ) {\n            const o = this.basefaces[i].length;\n            for (let m = 0; m < o; m++) {\n              this.cubies[k].push(this.cubies[k][0]);\n            }\n            this.duplicatedFaces[kk] = o;\n            this.duplicatedCubies[k] = o;\n            this.orbitoris[this.cubiesetnums[k]] = o;\n          }\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slicenum = [];\n      const slicecnts = [moveplaneset.length + 1, 0];\n      let bhi = 1;\n      while (bhi * 2 <= moveplaneset.length) {\n        bhi *= 2;\n      }\n      for (let i = 0; i < this.faces.length; i++) {\n        let t = 0;\n        if (moveplaneset.length > 0) {\n          const dv = this.facecentermass[i].dot(moveplaneset[0]);\n          for (let b = bhi; b > 0; b >>= 1) {\n            if (\n              t + b <= moveplaneset.length &&\n              dv > moveplaneset[t + b - 1].a\n            ) {\n              t += b;\n            }\n          }\n          t = moveplaneset.length - t;\n        }\n        slicenum.push(t);\n        while (slicecnts.length <= t) {\n          slicecnts.push(0);\n        }\n        slicecnts[t]++;\n      }\n      const axiscmoves = new Array(slicecnts.length);\n      for (let sc = 0; sc < slicecnts.length; sc++) {\n        axiscmoves[sc] = [];\n      }\n      const cubiedone = [];\n      for (let i = 0; i < this.faces.length; i++) {\n        if (slicenum[i] < 0) {\n          continue;\n        }\n        const b = this.facetocubies[i].slice();\n        let cm = this.facecentermass[i];\n        const ocm = cm;\n        let fi2 = i;\n        const sc = slicenum[fi2];\n        for (;;) {\n          slicenum[fi2] = -1;\n          const cm2 = cm.rotatepoint(this.moverotations[k][0]);\n          if (cm2.dist(ocm) < eps) {\n            break;\n          }\n          fi2 = this.findface2(cm2);\n          const c = this.facetocubies[fi2];\n          b.push(c[0], c[1]);\n          cm = cm2;\n        }\n        // If an oriented center is moving, we need to figure out\n        // the appropriate new orientation.  Normally we use the cubie\n        // sticker identity to locate, but this doesn't work here.\n        // Instead we need to redo the geometry of the sticker itself\n        // rotating and figure out how that maps to the destination\n        // sticker.\n        //\n        // We only need to do this for central center stickers: those\n        // where the face vertex goes through the center.  The others\n        // don't actually need orientation because they can only be\n        // in one orientation by physical constraints.  (You can't spin\n        // a point or cross sticker on the 5x5x5, for example.)\n        //\n        // This also simplifies things because it means the actual\n        // remapping has the same order as the moves themselves.\n        //\n        // The center may or may not have been duplicated at this point.\n        //\n        // The move moving the center might not be the same modulo as the\n        // center itself.\n        if (\n          b.length > 2 &&\n          this.orientCenters &&\n          (this.cubies[b[0]].length === 1 ||\n            this.cubies[b[0]][0] === this.cubies[b[0]][1])\n        ) {\n          // is this a real center cubie, around an axis?\n          if (\n            this.facecentermass[i].dist(\n              centermassface(this.basefaces[this.getfaceindex(i)]),\n            ) < eps\n          ) {\n            // how does remapping of the face/point set map to the original?\n            let face1 = this.cubies[b[0]][0];\n            for (let ii = 0; ii < b.length; ii += 2) {\n              const face0 = this.cubies[b[ii]][0];\n              let o = -1;\n              for (let jj = 0; jj < face1.length; jj++) {\n                if (face0[jj].dist(face1[0]) < eps) {\n                  o = jj;\n                  break;\n                }\n              }\n              if (o < 0) {\n                throw new Error(\n                  \"Couldn't find rotation of center faces; ignoring for now.\",\n                );\n              } else {\n                b[ii + 1] = o;\n                face1 = this.moverotations[k][0].rotateface(face1);\n              }\n            }\n          }\n        }\n        // b.length == 2 means a sticker is spinning in place.\n        // in this case we add duplicate stickers\n        // so that we can make it animate properly in a 3D world.\n        if (b.length === 2 && this.orientCenters) {\n          for (let ii = 1; ii < this.movesetorders[k]; ii++) {\n            if (sc === 0) {\n              b.push(b[0], ii);\n            } else {\n              b.push(\n                b[0],\n                (this.movesetorders[k] - ii) % this.movesetorders[k],\n              );\n            }\n          }\n        }\n        if (b.length > 2 && !cubiedone[b[0]]) {\n          if (b.length !== 2 * this.movesetorders[k]) {\n            throw new Error(\"Bad length in perm gen\");\n          }\n          for (let j = 0; j < b.length; j++) {\n            axiscmoves[sc].push(b[j]);\n          }\n        }\n        for (let j = 0; j < b.length; j += 2) {\n          cubiedone[b[j]] = true;\n        }\n      }\n      cmovesbyslice.push(axiscmoves);\n    }\n    this.cmovesbyslice = cmovesbyslice;\n    if (this.movelist !== undefined) {\n      const parsedmovelist: any[] = [];\n      // make sure the movelist makes sense based on the geos.\n      for (let i = 0; i < this.movelist.length; i++) {\n        parsedmovelist.push(this.parsemove(this.movelist[i]));\n      }\n      this.parsedmovelist = parsedmovelist;\n    }\n    this.facelisthash = null;\n    this.facecentermass = [];\n    this.cubiekey = [];\n  }\n\n  public getfaces(): number[][][] {\n    // get the faces for 3d.\n    return this.faces.map((_) => {\n      return _.map((__) => [__.b, __.c, __.d]);\n    });\n  }\n\n  public getboundarygeometry(): any {\n    // get the boundary geometry\n    return {\n      baseplanes: this.baseplanes,\n      facenames: this.facenames,\n      faceplanes: this.faceplanes,\n      vertexnames: this.vertexnames,\n      edgenames: this.edgenames,\n      geonormals: this.geonormals,\n    };\n  }\n\n  public getmovesets(k: number): any {\n    // get the move sets we support based on slices\n    // for even values we omit the middle \"slice\".  This isn't perfect\n    // but it is what we do for now.\n    // if there was a move list specified, pull values from that\n    const slices = this.moveplanesets[k].length;\n    let r = [];\n    if (this.parsedmovelist !== undefined) {\n      for (let i = 0; i < this.parsedmovelist.length; i++) {\n        const parsedmove = this.parsedmovelist[i];\n        if (parsedmove[1] !== k) {\n          continue;\n        }\n        if (parsedmove[4]) {\n          r.push([parsedmove[2], parsedmove[3]]);\n        } else {\n          r.push([slices - parsedmove[3], slices - parsedmove[2]]);\n        }\n        r.push(parsedmove[5]);\n      }\n    } else if (this.vertexmoves && !this.allmoves) {\n      const msg = this.movesetgeos[k];\n      if (msg[1] !== msg[3]) {\n        for (let i = 0; i < slices; i++) {\n          if (msg[1] !== \"v\") {\n            if (this.outerblockmoves) {\n              r.push([i + 1, slices]);\n            } else {\n              r.push([i + 1]);\n            }\n            r.push(1);\n          } else {\n            if (this.outerblockmoves) {\n              r.push([0, i]);\n            } else {\n              r.push([i, i]);\n            }\n            r.push(1);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i <= slices; i++) {\n        if (!this.allmoves && i + i === slices) {\n          continue;\n        }\n        if (this.outerblockmoves) {\n          if (i + i > slices) {\n            r.push([i, slices]);\n          } else {\n            r.push([0, i]);\n          }\n        } else {\n          r.push([i, i]);\n        }\n        r.push(1);\n      }\n    }\n    if (this.addrotations && !this.allmoves) {\n      r.push([0, slices]);\n      r.push(1);\n    }\n    if (this.fixedCubie >= 0) {\n      const dep = +this.cubiekeys[this.fixedCubie].trim().split(\" \")[k];\n      const newr = [];\n      for (let i = 0; i < r.length; i += 2) {\n        let o = r[i];\n        if (dep >= o[0] && dep <= o[1]) {\n          if (o[0] === 0) {\n            o = [o[1] + 1, slices];\n          } else if (slices === o[1]) {\n            o = [0, o[0] - 1];\n          } else {\n            throw Error(\"fixed cubie option would disconnect move\");\n          }\n        }\n        let found = false;\n        for (let j = 0; j < newr.length; j += 2) {\n          if (\n            newr[j][0] === o[0] &&\n            newr[j][1] === o[1] &&\n            newr[j + 1] === r[i + 1]\n          ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          newr.push(o);\n          newr.push(r[i + 1]);\n        }\n      }\n      r = newr;\n    }\n    return r;\n  }\n\n  public graybyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && (this.graycenters || !this.centersets)) ||\n      (ori === 2 && (this.grayedges || !this.edgesets)) ||\n      (ori > 2 && (this.graycorners || !this.cornersets))\n    );\n  }\n\n  public skipbyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && !this.centersets) ||\n      (ori === 2 && !this.edgesets) ||\n      (ori > 2 && !this.cornersets)\n    );\n  }\n\n  public skipcubie(fi: number): boolean {\n    return this.skipbyori(fi);\n  }\n\n  public skipset(set: number[]): boolean {\n    if (set.length === 0) {\n      return true;\n    }\n    const fi = set[0];\n    return this.skipbyori(this.facetocubies[fi][0]);\n  }\n\n  public header(comment: string): string {\n    return comment + copyright + \"\\n\" + comment + this.args + \"\\n\";\n  }\n\n  public writegap(): string {\n    // write out a gap set of generators\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    for (let i = 0; i < os.moveops.length; i++) {\n      const movename = \"M_\" + os.movenames[i];\n      // gap doesn't like angle brackets in IDs\n      mvs.push(movename);\n      r.push(movename + \":=\" + os.moveops[i].toPerm().toGap() + \";\");\n    }\n    r.push(\"Gen:=[\");\n    r.push(mvs.join(\",\"));\n    r.push(\"];\");\n    const ip = os.solved.identicalPieces();\n    r.push(\n      \"ip:=[\" +\n        ip.map((_) => \"[\" + _.map((__) => __ + 1).join(\",\") + \"]\").join(\",\") +\n        \"];\",\n    );\n    r.push(\"\");\n    return this.header(\"# \") + r.join(\"\\n\");\n  }\n\n  public writeksolve(\n    name: string = \"PuzzleGeometryPuzzle\",\n  ): string {\n    const od = this.getOrbitsDef(false);\n    return this.header(\"# \") + od.toKsolve(name).join(\"\\n\");\n  }\n\n  public writekpuzzle(fortwisty: boolean = true): PGVendoredKPuzzleDefinition {\n    const od = this.getOrbitsDef(fortwisty);\n    const r = od.toKpuzzle() as PGVendoredKPuzzleDefinition;\n    r.moveNotation = new PGNotation(this, od);\n    return r;\n  }\n\n  public getMoveFromBits(\n    moverange: number[],\n    amount: number,\n    inverted: boolean,\n    axiscmoves: number[][],\n    setmoves: number[] | undefined,\n    movesetorder: number,\n  ): Transformation {\n    const moveorbits: Orbit[] = [];\n    const perms = [];\n    const oris = [];\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      perms.push(iota(this.cubieords[ii]));\n      oris.push(zeros(this.cubieords[ii]));\n    }\n    for (let m = moverange[0]; m <= moverange[1]; m++) {\n      const slicecmoves = axiscmoves[m];\n      for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n        const mperm = slicecmoves.slice(j, j + 2 * movesetorder);\n        const setnum = this.cubiesetnums[mperm[0]];\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          mperm[ii] = this.cubieordnums[mperm[ii]];\n        }\n        let inc = 2;\n        let oinc = 3;\n        if (inverted) {\n          inc = mperm.length - 2;\n          oinc = mperm.length - 1;\n        }\n        if (perms[setnum] === iota(this.cubieords[setnum])) {\n          perms[setnum] = perms[setnum].slice();\n          if (this.orbitoris[setnum] > 1 && !this.killorientation) {\n            oris[setnum] = oris[setnum].slice();\n          }\n        }\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          perms[setnum][mperm[(ii + inc) % mperm.length]] = mperm[ii];\n          if (this.orbitoris[setnum] > 1 && !this.killorientation) {\n            oris[setnum][mperm[ii]] =\n              (mperm[(ii + oinc) % mperm.length] -\n                mperm[(ii + 1) % mperm.length] +\n                2 * this.orbitoris[setnum]) %\n              this.orbitoris[setnum];\n          }\n        }\n      }\n    }\n    let lastId = new Orbit(iota(24), zeros(24), 1);\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      if (setmoves && !setmoves[ii]) {\n        continue;\n      }\n      if (this.orbitoris[ii] === 1 || this.killorientation) {\n        if (perms[ii] === iota(lastId.perm.length)) {\n          if (perms[ii] !== lastId.perm) {\n            lastId = new Orbit(perms[ii], oris[ii], 1);\n          }\n          moveorbits.push(lastId);\n        } else {\n          moveorbits.push(new Orbit(perms[ii], oris[ii], 1));\n        }\n      } else {\n        const no = new Array<number>(oris[ii].length);\n        // convert ksolve oris to our internal ori rep\n        for (let jj = 0; jj < perms[ii].length; jj++) {\n          no[jj] = oris[ii][perms[ii][jj]];\n        }\n        moveorbits.push(new Orbit(perms[ii], no, this.orbitoris[ii]));\n      }\n    }\n    let mv = new Transformation(moveorbits);\n    if (amount !== 1) {\n      mv = mv.mulScalar(amount);\n    }\n    return mv;\n  }\n\n  public getOrbitsDef(fortwisty: boolean): OrbitsDef {\n    // generate a representation of the puzzle\n    const setmoves = [];\n    const setnames: string[] = [];\n    const setdefs: OrbitDef[] = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = this.getmovesets(k);\n      const movesetorder = this.movesetorders[k];\n      // check there's no redundancy in moveset.\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = 0; j < i; j += 2) {\n          if (moveset[i] === moveset[j] && moveset[i + 1] === moveset[j + 1]) {\n            throw new Error(\"Redundant moves in moveset.\");\n          }\n        }\n      }\n      const allbits = [];\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = moveset[i][0]; j <= moveset[i][1]; j++) {\n          allbits[j] = 1;\n        }\n      }\n      const axiscmoves = this.cmovesbyslice[k];\n      for (let i = 0; i < axiscmoves.length; i++) {\n        if (allbits[i] !== 1) {\n          continue;\n        }\n        const slicecmoves = axiscmoves[i];\n        for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n          if (this.skipcubie(slicecmoves[j])) {\n            continue;\n          }\n          const ind = this.cubiesetnums[slicecmoves[j]];\n          setmoves[ind] = 1;\n        }\n      }\n    }\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      setnames.push(this.cubiesetnames[i]);\n      setdefs.push(\n        new OrbitDef(\n          this.cubieords[i],\n          this.killorientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const solved: Orbit[] = [];\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      const p = [];\n      const o = [];\n      for (let j = 0; j < this.cubieords[i]; j++) {\n        if (fortwisty) {\n          p.push(j);\n        } else {\n          const cubie = this.cubiesetcubies[i][j];\n          p.push(this.cubievaluemap[cubie]);\n        }\n        o.push(0);\n      }\n      solved.push(\n        new Orbit(p, o, this.killorientation ? 1 : this.orbitoris[i]),\n      );\n    }\n    const movenames: string[] = [];\n    const moves: Transformation[] = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slices = moveplaneset.length;\n      const moveset = this.getmovesets(k);\n      const movesetgeo = this.movesetgeos[k];\n      for (let i = 0; i < moveset.length; i += 2) {\n        const movebits = moveset[i];\n        const mna = getmovename(movesetgeo, movebits, slices);\n        const movename = mna[0];\n        const inverted = mna[1];\n        if (moveset[i + 1] === 1) {\n          movenames.push(movename);\n        } else {\n          movenames.push(movename + moveset[i + 1]);\n        }\n        const mv = this.getMoveFromBits(\n          movebits,\n          moveset[i + 1],\n          inverted,\n          this.cmovesbyslice[k],\n          setmoves,\n          this.movesetorders[k],\n        );\n        moves.push(mv);\n      }\n    }\n    this.ksolvemovenames = movenames; // hack!\n    let r = new OrbitsDef(\n      setnames,\n      setdefs,\n      new VisibleState(solved),\n      movenames,\n      moves,\n    );\n    if (this.optimize) {\n      r = r.optimize();\n    }\n    if (this.scramble !== 0) {\n      r.scramble(this.scramble);\n    }\n    return r;\n  }\n\n  public getMovesAsPerms(): Perm[] {\n    return this.getOrbitsDef(false).moveops.map((_: Transformation) =>\n      _.toPerm(),\n    );\n  }\n\n  public showcanon(disp: (s: string) => void): void {\n    // show information for canonical move derivation\n    showcanon(this.getOrbitsDef(false), disp);\n  }\n\n  public getsolved(): Perm {\n    // get a solved position\n    const r = [];\n    for (let i = 0; i < this.basefacecount; i++) {\n      for (let j = 0; j < this.stickersperface; j++) {\n        r.push(i);\n      }\n    }\n    return new Perm(r);\n  }\n\n  // Given a rotation description that says to align feature1\n  // with a given vector, and then as much as possible feature2\n  // with another given vector, return a Quaternion that\n  // performs this rotation.\n  public getOrientationRotation(desiredRotation: any[]): Quat {\n    const feature1name = desiredRotation[0];\n    const direction1 = new Quat(\n      0,\n      desiredRotation[1][0],\n      -desiredRotation[1][1],\n      desiredRotation[1][2],\n    );\n    const feature2name = desiredRotation[2];\n    const direction2 = new Quat(\n      0,\n      desiredRotation[3][0],\n      -desiredRotation[3][1],\n      desiredRotation[3][2],\n    );\n    let feature1: Quat | null = null;\n    let feature2: Quat | null = null;\n    const feature1geoname = this.swizzler.unswizzle(feature1name);\n    const feature2geoname = this.swizzler.unswizzle(feature2name);\n    for (const gn of this.geonormals) {\n      if (feature1geoname === gn[1]) {\n        feature1 = gn[0];\n      }\n      if (feature2geoname === gn[1]) {\n        feature2 = gn[0];\n      }\n    }\n    if (!feature1) {\n      throw new Error(\"Could not find feature \" + feature1name);\n    }\n    if (!feature2) {\n      throw new Error(\"Could not find feature \" + feature2name);\n    }\n    const r1 = feature1.pointrotation(direction1);\n    const feature2rot = feature2.rotatepoint(r1);\n    const r2 = feature2rot\n      .unproject(direction1)\n      .pointrotation(direction2.unproject(direction1));\n    return r2.mul(r1);\n  }\n\n  public getInitial3DRotation(): Quat {\n    const basefacecount = this.basefacecount;\n    let rotDesc: any = null;\n    if (this.puzzleOrientation) {\n      rotDesc = this.puzzleOrientation;\n    } else if (this.puzzleOrientations) {\n      rotDesc = this.puzzleOrientations[basefacecount];\n    }\n    // either no option specified or no matching key in\n    // puzzleOrientations.\n    if (!rotDesc) {\n      rotDesc = defaultOrientations()[basefacecount];\n    }\n    if (!rotDesc) {\n      throw new Error(\"No default orientation?\");\n    }\n    return this.getOrientationRotation(rotDesc);\n  }\n\n  public generatesvg(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n  ): string {\n    // generate svg to interoperate with Lucas twistysim\n    w -= 2 * trim;\n    h -= 2 * trim;\n    function extendedges(a: number[][], n: number): void {\n      let dx = a[1][0] - a[0][0];\n      let dy = a[1][1] - a[0][1];\n      const ang = (2 * Math.PI) / n;\n      const cosa = Math.cos(ang);\n      const sina = Math.sin(ang);\n      for (let i = 2; i < n; i++) {\n        const ndx = dx * cosa + dy * sina;\n        dy = dy * cosa - dx * sina;\n        dx = ndx;\n        a.push([a[i - 1][0] + dx, a[i - 1][1] + dy]);\n      }\n    }\n    // if we don't add this noise to coordinate values, then Safari\n    // doesn't render our polygons correctly.  What a hack.\n    function noise(c: number): number {\n      return c + 0 * (Math.random() - 0.5);\n    }\n    function drawedges(id: string, pts: number[][], color: string): string {\n      return (\n        '<polygon id=\"' +\n        id +\n        '\" class=\"sticker\" style=\"fill: ' +\n        color +\n        '\" points=\"' +\n        pts.map((p) => noise(p[0]) + \" \" + noise(p[1])).join(\" \") +\n        '\"/>\\n'\n      );\n    }\n    // What grips do we need?  if rotations, add all grips.\n    let needvertexgrips = this.addrotations;\n    let neededgegrips = this.addrotations;\n    let needfacegrips = this.addrotations;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      for (let j = 1; j <= 3; j += 2) {\n        if (msg[j] === \"v\") {\n          needvertexgrips = true;\n        }\n        if (msg[j] === \"f\") {\n          needfacegrips = true;\n        }\n        if (msg[j] === \"e\") {\n          neededgegrips = true;\n        }\n      }\n    }\n    // Find a net from a given face count.  Walk it, assuming we locate\n    // the first edge from (0,0) to (1,1) and compute the minimum and\n    // maximum vertex locations from this.  Then do a second walk, and\n    // assign the actual geometry.\n    this.genperms();\n    const boundarygeo = this.getboundarygeometry();\n    const face0 = boundarygeo.facenames[0][0];\n    const polyn = face0.length; // number of vertices; 3, 4, or 5\n    const net = this.net;\n    if (net === null) {\n      throw new Error(\"No net?\");\n    }\n    const edges: any = {};\n    let minx = 0;\n    let miny = 0;\n    let maxx = 1;\n    let maxy = 0;\n    edges[net[0][0]] = [\n      [1, 0],\n      [0, 0],\n    ];\n    extendedges(edges[net[0][0]], polyn);\n    for (let i = 0; i < net.length; i++) {\n      const f0 = net[i][0];\n      if (!edges[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      for (let j = 1; j < net[i].length; j++) {\n        const f1 = net[i][j];\n        if (f1 === \"\" || edges[f1]) {\n          continue;\n        }\n        edges[f1] = [edges[f0][j % polyn], edges[f0][(j + polyn - 1) % polyn]];\n        extendedges(edges[f1], polyn);\n      }\n    }\n    for (const f in edges) {\n      const es = edges[f];\n      for (let i = 0; i < es.length; i++) {\n        minx = Math.min(minx, es[i][0]);\n        maxx = Math.max(maxx, es[i][0]);\n        miny = Math.min(miny, es[i][1]);\n        maxy = Math.max(maxy, es[i][1]);\n      }\n    }\n    const sc = Math.min(w / (maxx - minx), h / (maxy - miny));\n    const xoff = 0.5 * (w - sc * (maxx + minx));\n    const yoff = 0.5 * (h - sc * (maxy + miny));\n    const geos: any = {};\n    const bg = this.getboundarygeometry();\n    const edges2: any = {};\n    const initv = [\n      [sc + xoff, yoff],\n      [xoff, yoff],\n    ];\n    edges2[net[0][0]] = initv;\n    extendedges(edges2[net[0][0]], polyn);\n    geos[this.facenames[0][1]] = this.project2d(0, 0, [\n      new Quat(0, initv[0][0], initv[0][1], 0),\n      new Quat(0, initv[1][0], initv[1][1], 0),\n    ]);\n    const connectat = [];\n    connectat[0] = 0;\n    for (let i = 0; i < net.length; i++) {\n      const f0 = net[i][0];\n      if (!edges2[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      let gfi = -1;\n      for (let j = 0; j < bg.facenames.length; j++) {\n        if (f0 === bg.facenames[j][1]) {\n          gfi = j;\n          break;\n        }\n      }\n      if (gfi < 0) {\n        throw new Error(\"Could not find first face name \" + f0);\n      }\n      const thisface = bg.facenames[gfi][0];\n      for (let j = 1; j < net[i].length; j++) {\n        const f1 = net[i][j];\n        if (f1 === \"\" || edges2[f1]) {\n          continue;\n        }\n        edges2[f1] = [\n          edges2[f0][j % polyn],\n          edges2[f0][(j + polyn - 1) % polyn],\n        ];\n        extendedges(edges2[f1], polyn);\n        // what edge are we at?\n        const caf0 = connectat[gfi];\n        const mp = thisface[(caf0 + j) % polyn]\n          .sum(thisface[(caf0 + j + polyn - 1) % polyn])\n          .smul(0.5);\n        const epi = findelement(bg.edgenames, mp);\n        const edgename = bg.edgenames[epi][1];\n        const el = splitByFaceNames(edgename, this.facenames);\n        const gf1 = el[f0 === el[0] ? 1 : 0];\n        let gf1i = -1;\n        for (let k = 0; k < bg.facenames.length; k++) {\n          if (gf1 === bg.facenames[k][1]) {\n            gf1i = k;\n            break;\n          }\n        }\n        if (gf1i < 0) {\n          throw new Error(\"Could not find second face name\");\n        }\n        const otherface = bg.facenames[gf1i][0];\n        for (let k = 0; k < otherface.length; k++) {\n          const mp2 = otherface[k].sum(otherface[(k + 1) % polyn]).smul(0.5);\n          if (mp2.dist(mp) <= eps) {\n            const p1 = edges2[f0][(j + polyn - 1) % polyn];\n            const p2 = edges2[f0][j % polyn];\n            connectat[gf1i] = k;\n            geos[gf1] = this.project2d(gf1i, k, [\n              new Quat(0, p2[0], p2[1], 0),\n              new Quat(0, p1[0], p1[1], 0),\n            ]);\n            break;\n          }\n        }\n      }\n    }\n    // Let's build arrays for faster rendering.  We want to map from geo\n    // base face number to color, and we want to map from geo face number\n    // to 2D geometry.  These can be reused as long as the puzzle overall\n    // orientation and canvas size remains unchanged.\n    const pos = this.getsolved();\n    const colormap = [];\n    const facegeo = [];\n    for (let i = 0; i < this.basefacecount; i++) {\n      colormap[i] = this.colors[this.facenames[i][1]];\n    }\n    let hix = 0;\n    let hiy = 0;\n    const rot = this.getInitial3DRotation();\n    for (let i = 0; i < this.faces.length; i++) {\n      let face = this.faces[i];\n      face = rot.rotateface(face);\n      for (let j = 0; j < face.length; j++) {\n        hix = Math.max(hix, Math.abs(face[j].b));\n        hiy = Math.max(hiy, Math.abs(face[j].c));\n      }\n    }\n    const sc2 = Math.min(h / hiy / 2, (w - trim) / hix / 4);\n    const mappt2d = (fn: number, q: Quat): number[] => {\n      if (threed) {\n        const xoff2 = 0.5 * trim + 0.25 * w;\n        const xmul = this.baseplanes[fn].rotateplane(rot).d < 0 ? 1 : -1;\n        return [\n          trim + w * 0.5 + xmul * (xoff2 - q.b * sc2),\n          trim + h * 0.5 + q.c * sc2,\n        ];\n      } else {\n        const g = geos[this.facenames[fn][1]];\n        return [trim + q.dot(g[0]) + g[2].b, trim + h - q.dot(g[1]) - g[2].c];\n      }\n    };\n    for (let i = 0; i < this.faces.length; i++) {\n      let face = this.faces[i];\n      const facenum = Math.floor(i / this.stickersperface);\n      if (threed) {\n        face = rot.rotateface(face);\n      }\n      facegeo.push(face.map((_: Quat) => mappt2d(facenum, _)));\n    }\n    const svg = [];\n    // group each base face so we can add a hover element\n    for (let j = 0; j < this.basefacecount; j++) {\n      svg.push(\"<g>\");\n      svg.push(\"<title>\" + this.facenames[j][1] + \"</title>\\n\");\n      for (let ii = 0; ii < this.stickersperface; ii++) {\n        const i = j * this.stickersperface + ii;\n        const cubie = this.facetocubies[i][0];\n        const cubieori = this.facetocubies[i][1];\n        const cubiesetnum = this.cubiesetnums[cubie];\n        const cubieord = this.cubieordnums[cubie];\n        const color = this.graybyori(cubie) ? \"#808080\" : colormap[pos.p[i]];\n        let id =\n          this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + cubieori;\n        svg.push(drawedges(id, facegeo[i], color));\n        if (this.duplicatedFaces[i]) {\n          for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n            id = this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + jj;\n            svg.push(drawedges(id, facegeo[i], color));\n          }\n        }\n      }\n      svg.push(\"</g>\");\n    }\n    const svggrips: any[] = [];\n    function addgrip(\n      onface: number,\n      name: string,\n      pt: Quat,\n      order: number,\n    ): void {\n      const pt2 = mappt2d(onface, pt);\n      for (let i = 0; i < svggrips.length; i++) {\n        if (\n          Math.hypot(pt2[0] - svggrips[i][0], pt2[1] - svggrips[i][1]) < eps\n        ) {\n          return;\n        }\n      }\n      svggrips.push([pt2[0], pt2[1], name, order]);\n    }\n    for (let i = 0; i < this.faceplanes.length; i++) {\n      const baseface = this.facenames[i][0];\n      let facecoords = baseface;\n      if (threed) {\n        facecoords = rot.rotateface(facecoords);\n      }\n      if (needfacegrips) {\n        let pt = this.faceplanes[i][0];\n        if (threed) {\n          pt = pt.rotatepoint(rot);\n        }\n        addgrip(i, this.faceplanes[i][1], pt, polyn);\n      }\n      for (let j = 0; j < baseface.length; j++) {\n        if (neededgegrips) {\n          const mp = baseface[j]\n            .sum(baseface[(j + 1) % baseface.length])\n            .smul(0.5);\n          const ep = findelement(this.edgenames, mp);\n          const mpc = facecoords[j]\n            .sum(facecoords[(j + 1) % baseface.length])\n            .smul(0.5);\n          addgrip(i, this.edgenames[ep][1], mpc, 2);\n        }\n        if (needvertexgrips) {\n          const vp = findelement(this.vertexnames, baseface[j]);\n          addgrip(i, this.vertexnames[vp][1], facecoords[j], this.cornerfaces);\n        }\n      }\n    }\n    const html =\n      '<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 500\">\\n' +\n      '<style type=\"text/css\"><![CDATA[' +\n      \".sticker { stroke: #000000; stroke-width: 1px; }\" +\n      \"]]></style>\\n\" +\n      svg.join(\"\") +\n      \"</svg>\";\n    this.svggrips = svggrips;\n    return html;\n  }\n\n  public dist(a: number[], b: number[]): number {\n    return Math.hypot(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\n  }\n\n  public triarea(a: number[], b: number[], c: number[]): number {\n    const ab = this.dist(a, b);\n    const bc = this.dist(b, c);\n    const ac = this.dist(a, c);\n    const p = (ab + bc + ac) / 2;\n    return Math.sqrt(p * (p - ab) * (p - bc) * (p - ac));\n  }\n\n  public polyarea(coords: number[][]): number {\n    let sum = 0;\n    for (let i = 2; i < coords.length; i++) {\n      sum += this.triarea(coords[0], coords[1], coords[i]);\n    }\n    return sum;\n  }\n\n  // The colorfrac parameter says how much of the face should be\n  // colored (vs dividing lines); we default to 0.77 which seems\n  // to work pretty well.  It should be a number between probably\n  // 0.4 and 0.9.\n  public get3d(\n    colorfrac: number = DEFAULT_COLOR_FRACTION,\n    options?: {\n      stickerColors?: string[];\n    },\n  ): StickerDat {\n    const stickers: any = [];\n    const foundations: any = [];\n    const rot = this.getInitial3DRotation();\n    const faces: any = [];\n    const maxdist: number = 0.52 * this.basefaces[0][0].len();\n    let avgstickerarea = 0;\n    for (let i = 0; i < this.basefaces.length; i++) {\n      const coords = rot.rotateface(this.basefaces[i]);\n      const name = this.facenames[i][1];\n      faces.push({ coords: toFaceCoords(coords, maxdist), name });\n      avgstickerarea += this.polyarea(faces[i].coords);\n    }\n    avgstickerarea /= this.faces.length;\n    const trim = (Math.sqrt(avgstickerarea) * (1 - Math.sqrt(colorfrac))) / 2;\n    for (let i = 0; i < this.faces.length; i++) {\n      const facenum = Math.floor(i / this.stickersperface);\n      const cubie = this.facetocubies[i][0];\n      const cubieori = this.facetocubies[i][1];\n      const cubiesetnum = this.cubiesetnums[cubie];\n      const cubieord = this.cubieordnums[cubie];\n      let color = this.graybyori(cubie)\n        ? \"#808080\"\n        : this.colors[this.facenames[facenum][1]];\n      if (options?.stickerColors) {\n        color = options.stickerColors[i];\n      }\n      let coords = rot.rotateface(this.faces[i]);\n      foundations.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n      });\n      const fcoords = coords;\n      if (trim && trim > 0) {\n        coords = trimEdges(coords, trim);\n      }\n      stickers.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n      });\n      if (this.duplicatedFaces[i]) {\n        for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n          stickers.push({\n            coords: toFaceCoords(coords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n          });\n          foundations.push({\n            coords: toFaceCoords(fcoords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n          });\n        }\n      }\n    }\n    const grips: StickerDatAxis[] = [];\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      const order = this.movesetorders[i];\n      for (let j = 0; j < this.geonormals.length; j++) {\n        const gn = this.geonormals[j];\n        if (msg[0] === gn[1] && msg[1] === gn[2]) {\n          grips.push([toCoords(gn[0].rotatepoint(rot), 1), msg[0], order]);\n          grips.push([\n            toCoords(gn[0].rotatepoint(rot).smul(-1), 1),\n            msg[2],\n            order,\n          ]);\n        }\n      }\n    }\n    const f = (function () {\n      return function (mv: Move): string {\n        return this.unswizzle(mv);\n      };\n    })().bind(this);\n    return {\n      stickers,\n      foundations,\n      faces,\n      axis: grips,\n      unswizzle: f,\n      notationMapper: this.notationMapper,\n    };\n  }\n\n  //  From the name of a geometric element (face, vertex, edge), get a\n  //  normal vector respecting the default orientation.  This is useful\n  //  to define the initial position of the camera in a 3D scene.  The\n  //  return value is normalized, so multiply it by the camera distance.\n  //  Returns undefined if no such geometric element.\n  public getGeoNormal(geoname: string): number[] | undefined {\n    const rot = this.getInitial3DRotation();\n    const grip = this.swizzler.unswizzle(geoname);\n    for (let j = 0; j < this.geonormals.length; j++) {\n      const gn = this.geonormals[j];\n      if (grip === gn[1]) {\n        const r = toCoords(gn[0].rotatepoint(rot), 1);\n        //  This routine is intended to use for the camera location.\n        //  If the camera location is vertical, and we give some\n        //  near-zero values for x and z, then the rotation in the\n        //  X/Z plane will be somewhat arbitrary.  So we clean up the\n        //  returned vector here.  We give a very slight positive\n        //  z value.\n        if (Math.abs(r[0]) < eps && Math.abs(r[2]) < eps) {\n          r[0] = 0.0;\n          r[2] = 1e-6;\n        }\n        return r;\n      }\n    }\n    return undefined;\n  }\n\n  private getfaceindex(facenum: number): number {\n    const divid = this.stickersperface;\n    return Math.floor(facenum / divid);\n  }\n}\n\nclass PGNotation implements MoveNotation {\n  private cache: { [key: string]: KTransformation } = {};\n  public orbitNames: string[];\n  constructor(public pg: PuzzleGeometry, od: OrbitsDef) {\n    this.orbitNames = od.orbitnames;\n  }\n\n  public lookupMove(move: Move): KTransformation | undefined {\n    const key = this.moveToKeyString(move);\n    if (key in this.cache) {\n      return this.cache[key];\n    }\n    const mv = this.pg.parseMove(move);\n    let bits = [mv[2], mv[3]];\n    if (!mv[4]) {\n      const slices = this.pg.moveplanesets[mv[1]].length;\n      bits = [slices - mv[3], slices - mv[2]];\n    }\n    const pgmv = this.pg.getMoveFromBits(\n      bits,\n      mv[5],\n      !mv[4],\n      this.pg.cmovesbyslice[mv[1]],\n      undefined,\n      this.pg.movesetorders[mv[1]],\n    );\n    const r = OrbitsDef.transformToKPuzzle(this.orbitNames, pgmv);\n    this.cache[key] = r;\n    return r;\n  }\n\n  // This is only used to construct keys, so does not need to be beautiful.\n  private moveToKeyString(move: Move): string {\n    let r = \"\";\n    if (move.outerLayer) {\n      r = r + move.outerLayer + \",\";\n    }\n    if (move.innerLayer) {\n      r = r + move.innerLayer + \",\";\n    }\n    r = r + move.family + \",\" + move.effectiveAmount;\n    return r;\n  }\n}\n","// Manages a set of face names.  Detects whether they are prefix-free.\n// Implements greedy splitting into face names and comparisons between\n// concatenated face names and grip names.\n\nexport class FaceNameSwizzler {\n  public prefixFree: boolean = true;\n  public gripnames: string[] = [];\n  constructor(public facenames: string[], gripnames_arg?: string[]) {\n    if (gripnames_arg) {\n      this.gripnames = gripnames_arg;\n    }\n    for (let i = 0; this.prefixFree && i < facenames.length; i++) {\n      for (let j = 0; this.prefixFree && j < facenames.length; j++) {\n        if (i !== j && facenames[i].startsWith(facenames[j])) {\n          this.prefixFree = false;\n        }\n      }\n    }\n  }\n\n  public setGripNames(names: string[]): void {\n    this.gripnames = names;\n  }\n\n  // split a string into face names and return a list of\n  // indices.\n  public splitByFaceNames(s: string): number[] {\n    const r = [];\n    let at = 0;\n    while (at < s.length) {\n      if (at > 0 && at < s.length && s[at] === \"_\") {\n        at++;\n      }\n      let currentMatch = -1;\n      for (let i = 0; i < this.facenames.length; i++) {\n        if (\n          s.substr(at).startsWith(this.facenames[i]) &&\n          (currentMatch < 0 ||\n            this.facenames[i].length > this.facenames[currentMatch].length)\n        ) {\n          currentMatch = i;\n        }\n      }\n      if (currentMatch >= 0) {\n        r.push(currentMatch);\n        at += this.facenames[currentMatch].length;\n      } else {\n        throw new Error(\"Could not split \" + s + \" into face names.\");\n      }\n    }\n    return r;\n  }\n\n  // cons a grip from an array of numbers.\n  public joinByFaceIndices(list: number[]): string {\n    let sep = \"\";\n    const r = [];\n    for (let i = 0; i < list.length; i++) {\n      r.push(sep);\n      r.push(this.facenames[list[i]]);\n      if (!this.prefixFree) {\n        sep = \"_\";\n      }\n    }\n    return r.join(\"\");\n  }\n\n  /*\n   *   Try to match something the user gave us with some geometric\n   *   feature.  We used to have strict requirements:\n   *\n   *      a)  The set of face names are prefix free\n   *      b)  When specifying a corner, all coincident planes were\n   *          specified\n   *\n   *   But, to allow megaminx to have more reasonable and\n   *   conventional names, and to permit shorter canonical\n   *   names, we are relaxing these requirements and adding\n   *   new syntax.  Now:\n   *\n   *      a)  Face names need not be syntax free.\n   *      b)  When parsing a geometric name, we use greedy\n   *          matching, so the longest name that matches the\n   *          user string at the current position is the one\n   *          assumed to match.\n   *      c)  Underscores are permitted to separate face names\n   *          (both in user input and in geometric\n   *          descriptions).\n   *      d)  Default names of corner moves where corners have\n   *          more than three corners, need only include three\n   *          of the corners.\n   *\n   *   This code is not performance-sensitive so we can do it a\n   *   slow and simple way.\n   */\n  public spinmatch(userinput: string, longname: string): boolean {\n    // are these the same rotationally?\n    if (userinput === longname) {\n      return true;\n    }\n    try {\n      const e1 = this.splitByFaceNames(userinput);\n      const e2 = this.splitByFaceNames(longname);\n      // All elements of userinput need to be in the longname.\n      // There should be no duplicate elements in the userinput.\n      // if both have length 1 or length 2, the sets must be equal.\n      // if both have length 3 or more, then the first set must be\n      // a subset of the second.  Order doesn't matter.\n      if (e1.length !== e2.length && e1.length < 3) {\n        return false;\n      }\n      for (let i = 0; i < e1.length; i++) {\n        for (let j = 0; j < i; j++) {\n          if (e1[i] === e1[j]) {\n            return false;\n          }\n        }\n        let found = false;\n        for (let j = 0; j < e2.length; j++) {\n          if (e1[i] === e2[j]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public unswizzle(s: string): string {\n    if ((s.endsWith(\"v\") || s.endsWith(\"w\")) && s[0] <= \"Z\") {\n      s = s.slice(0, s.length - 1);\n    }\n    const upperCaseGrip = s.toUpperCase();\n    for (let i = 0; i < this.gripnames.length; i++) {\n      const g = this.gripnames[i];\n      if (this.spinmatch(upperCaseGrip, g)) {\n        return g;\n      }\n    }\n    return s;\n  }\n}\n","import { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport { Move, QuantumMove } from \"../alg\";\n\nexport interface NotationMapper {\n  notationToInternal(move: Move): Move | null;\n  notationToExternal(move: Move): Move | null;\n}\n\nexport class NullMapper implements NotationMapper {\n  public notationToInternal(move: Move): Move {\n    return move;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return move;\n  }\n}\n\nfunction negate(family: string, v: number | undefined): Move {\n  if (v === undefined) {\n    v = -1;\n  } else if (v === -1) {\n    v = undefined;\n  } else {\n    v = -v;\n  }\n  return new Move(family, v);\n}\n\nexport class NxNxNCubeMapper implements NotationMapper {\n  constructor(public slices: number) {}\n\n  public notationToInternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"x\") {\n        move = new Move(\"Rv\", move.effectiveAmount);\n      } else if (grip === \"y\") {\n        move = new Move(\"Uv\", move.effectiveAmount);\n      } else if (grip === \"z\") {\n        move = new Move(\"Fv\", move.effectiveAmount);\n      }\n      if ((this.slices & 1) === 1) {\n        if (grip === \"E\") {\n          move = new Move(\n            new QuantumMove(\"D\", (this.slices + 1) / 2),\n            move.effectiveAmount,\n          );\n        } else if (grip === \"M\") {\n          move = new Move(\n            new QuantumMove(\"L\", (this.slices + 1) / 2),\n            move.effectiveAmount,\n          );\n        } else if (grip === \"S\") {\n          move = new Move(\n            new QuantumMove(\"F\", (this.slices + 1) / 2),\n            move.effectiveAmount,\n          );\n        }\n      }\n      if (this.slices > 2) {\n        if (grip === \"e\") {\n          move = new Move(\n            new QuantumMove(\"D\", this.slices - 1, 2),\n            move.effectiveAmount,\n          );\n        } else if (grip === \"m\") {\n          move = new Move(\n            new QuantumMove(\"L\", this.slices - 1, 2),\n            move.effectiveAmount,\n          );\n        } else if (grip === \"s\") {\n          move = new Move(\n            new QuantumMove(\"F\", this.slices - 1, 2),\n            move.effectiveAmount,\n          );\n        }\n      }\n    }\n    return move;\n  }\n\n  // do we want to map slice moves to E/M/S instead of 2U/etc.?\n  public notationToExternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"Rv\") {\n        return new Move(\"x\", move.effectiveAmount);\n      } else if (grip === \"Uv\") {\n        return new Move(\"y\", move.effectiveAmount);\n      } else if (grip === \"Fv\") {\n        return new Move(\"z\", move.effectiveAmount);\n      } else if (grip === \"Lv\") {\n        return negate(\"x\", move.effectiveAmount);\n      } else if (grip === \"Dv\") {\n        return negate(\"y\", move.effectiveAmount);\n      } else if (grip === \"Bv\") {\n        return negate(\"z\", move.effectiveAmount);\n      }\n    }\n    return move;\n  }\n}\n\n// face renaming mapper.  Accepts two face name remappers.  We\n// work between the two.\n\nexport class FaceRenamingMapper implements NotationMapper {\n  constructor(\n    public internalNames: FaceNameSwizzler,\n    public externalNames: FaceNameSwizzler,\n  ) {}\n\n  // TODO:  consider putting a cache in front of this\n  public convertString(\n    grip: string,\n    a: FaceNameSwizzler,\n    b: FaceNameSwizzler,\n  ): string {\n    let suffix = \"\";\n    if ((grip.endsWith(\"v\") || grip.endsWith(\"v\")) && grip <= \"_\") {\n      suffix = grip.slice(grip.length - 1);\n      grip = grip.slice(0, grip.length - 1);\n    }\n    const upper = grip.toUpperCase();\n    let isLowerCase = false;\n    if (grip !== upper) {\n      isLowerCase = true;\n      grip = upper;\n    }\n    grip = b.joinByFaceIndices(a.splitByFaceNames(grip));\n    if (isLowerCase) {\n      grip = grip.toLowerCase();\n    }\n    return grip + suffix;\n  }\n\n  public convert(move: Move, a: FaceNameSwizzler, b: FaceNameSwizzler): Move {\n    const grip = move.family;\n    const ngrip = this.convertString(grip, a, b);\n    if (grip === ngrip) {\n      return move;\n    } else {\n      return new Move(\n        new QuantumMove(ngrip, move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    }\n  }\n\n  public notationToInternal(move: Move): Move {\n    const r = this.convert(move, this.externalNames, this.internalNames);\n    return r;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return this.convert(move, this.internalNames, this.externalNames);\n  }\n}\n\n// Sits on top of a (possibly null) notation mapper, and\n// adds R++/R--/D++/D-- notation mapping.\nexport class MegaminxScramblingNotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer === undefined && move.outerLayer === undefined) {\n      if (Math.abs(move.effectiveAmount) === 1) {\n        if (move.family === \"R++\") {\n          return new Move(\n            new QuantumMove(\"L\", 3, 2),\n            -2 * move.effectiveAmount,\n          );\n        } else if (move.family === \"R--\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), 2 * move.effectiveAmount);\n        } else if (move.family === \"D++\") {\n          return new Move(\n            new QuantumMove(\"U\", 3, 2),\n            -2 * move.effectiveAmount,\n          );\n        } else if (move.family === \"D--\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), 2 * move.effectiveAmount);\n        }\n      }\n      if (move.family === \"y\") {\n        return new Move(\"Uv\", move.effectiveAmount);\n      }\n    }\n    return this.child.notationToInternal(move);\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === \"Uv\") {\n      return new Move(\n        new QuantumMove(\"y\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    }\n    if (move.family === \"Dv\") {\n      return negate(\"y\", move.effectiveAmount);\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n\nexport class SkewbNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    if (move.family === \"F\") {\n      return new Move(\n        new QuantumMove(\"DFR\", move.outerLayer, move.innerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"R\") {\n      return new Move(\n        new QuantumMove(\"DBR\", move.outerLayer, move.innerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"L\") {\n      return new Move(\n        new QuantumMove(\"DFL\", move.outerLayer, move.innerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"B\") {\n      return new Move(\n        new QuantumMove(\"DBL\", move.outerLayer, move.innerLayer),\n        move.effectiveAmount,\n      );\n      /*\n       *   (1) We are not including x/y/z in Skewb; they aren't WCA notation and\n       *   it's unclear anyone needs them for reconstructions.\n       *\n    } else if (move.family === \"x\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Rv\", move.amount);\n    } else if (move.family === \"y\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Uv\", move.amount);\n    } else if (move.family === \"z\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Fv\", move.amount);\n       */\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (this.child.spinmatch(move.family, \"DFR\")) {\n      return new Move(\n        new QuantumMove(\"F\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (this.child.spinmatch(move.family, \"DRB\")) {\n      return new Move(\n        new QuantumMove(\"R\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (this.child.spinmatch(move.family, \"DFL\")) {\n      return new Move(\n        new QuantumMove(\"L\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (this.child.spinmatch(move.family, \"DBL\")) {\n      return new Move(\n        new QuantumMove(\"B\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n      /*\n       *   See (1) above.\n       *\n    } else if (move.family === \"Rv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"x\", move.amount);\n    } else if (move.family === \"Uv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"y\", move.amount);\n    } else if (move.family === \"Fv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"z\", move.amount);\n       */\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class PyraminxNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    if (move.family === \"U\") {\n      return new Move(\n        new QuantumMove(\"flr\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"R\") {\n      return new Move(\n        new QuantumMove(\"fld\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"L\") {\n      return new Move(\n        new QuantumMove(\"frd\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"B\") {\n      return new Move(\n        new QuantumMove(\"dlr\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"u\") {\n      return new Move(\n        new QuantumMove(\"FLR\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"r\") {\n      return new Move(\n        new QuantumMove(\"FLD\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"l\") {\n      return new Move(\n        new QuantumMove(\"FRD\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"b\") {\n      return new Move(\n        new QuantumMove(\"DLR\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else if (move.family === \"y\") {\n      return negate(\"Dv\", move.effectiveAmount);\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === move.family.toLowerCase()) {\n      const fam = move.family.toUpperCase();\n      if (this.child.spinmatch(fam, \"FLR\")) {\n        return new Move(\n          new QuantumMove(\"U\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(fam, \"FLD\")) {\n        return new Move(\n          new QuantumMove(\"R\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(fam, \"FRD\")) {\n        return new Move(\n          new QuantumMove(\"L\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(fam, \"DLR\")) {\n        return new Move(\n          new QuantumMove(\"B\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      }\n    }\n    if (move.family === move.family.toUpperCase()) {\n      if (this.child.spinmatch(move.family, \"FLR\")) {\n        return new Move(\n          new QuantumMove(\"u\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(move.family, \"FLD\")) {\n        return new Move(\n          new QuantumMove(\"r\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(move.family, \"FRD\")) {\n        return new Move(\n          new QuantumMove(\"l\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      } else if (this.child.spinmatch(move.family, \"DLR\")) {\n        return new Move(\n          new QuantumMove(\"b\", move.innerLayer, move.outerLayer),\n          move.effectiveAmount,\n        );\n      }\n    }\n    if (move.family === \"Dv\") {\n      return negate(\"y\", move.effectiveAmount);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class FTONotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper, private sw: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (\n      move.family === \"T\" &&\n      move.innerLayer === undefined &&\n      move.outerLayer === undefined\n    ) {\n      return new Move(\n        new QuantumMove(\"FLRv\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    } else {\n      const r = this.child.notationToInternal(move);\n      return r;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    let fam = move.family;\n    if (fam.length > 0 && fam[fam.length - 1] === \"v\") {\n      fam = fam.substring(0, fam.length - 1);\n    }\n    if (this.sw.spinmatch(fam, \"FLUR\")) {\n      return new Move(\n        new QuantumMove(\"T\", move.innerLayer, move.outerLayer),\n        move.effectiveAmount,\n      );\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","export type PuzzleDescriptionString = string;\n\nexport const PGPuzzles: { [name: string]: PuzzleDescriptionString } = {\n  \"2x2x2\": \"c f 0\",\n  \"3x3x3\": \"c f 0.333333333333333\",\n  \"4x4x4\": \"c f 0.5 f 0\",\n  \"5x5x5\": \"c f 0.6 f 0.2\",\n  \"6x6x6\": \"c f 0.666666666666667 f 0.333333333333333 f 0\",\n  \"7x7x7\": \"c f 0.714285714285714 f 0.428571428571429 f 0.142857142857143\",\n  \"8x8x8\": \"c f 0.75 f 0.5 f 0.25 f 0\",\n  \"9x9x9\":\n    \"c f 0.777777777777778 f 0.555555555555556 f 0.333333333333333 f 0.111111111111111\",\n  \"10x10x10\": \"c f 0.8 f 0.6 f 0.4 f 0.2 f 0\",\n  \"11x11x11\":\n    \"c f 0.818181818181818 f 0.636363636363636 f 0.454545454545455 f 0.272727272727273 f 0.0909090909090909\",\n  \"12x12x12\":\n    \"c f 0.833333333333333 f 0.666666666666667 f 0.5 f 0.333333333333333 f 0.166666666666667 f 0\",\n  \"13x13x13\":\n    \"c f 0.846153846153846 f 0.692307692307692 f 0.538461538461538 f 0.384615384615385 f 0.230769230769231 f 0.0769230769230769\",\n  \"20x20x20\": \"c f 0 f .1 f .2 f .3 f .4 f .5 f .6 f .7 f .8 f .9\",\n  \"30x30x30\":\n    \"c f 0 f .066667 f .133333 f .2 f .266667 f .333333 f .4 f .466667 f .533333 f .6 f .666667 f .733333 f .8 f .866667 f .933333\",\n  \"40x40x40\":\n    \"c f 0 f .05 f .1 f .15 f .2 f .25 f .3 f .35 f .4 f .45 f .5 f .55 f .6 f .65 f .7 f .75 f .8 f .85 f .9 f .95\",\n  \"skewb\": \"c v 0\",\n  \"master skewb\": \"c v 0.275\",\n  \"professor skewb\": \"c v 0 v 0.38\",\n  \"compy cube\": \"c v 0.915641442663986\",\n  \"helicopter\": \"c e 0.707106781186547\",\n  \"curvy copter\": \"c e 0.83\",\n  \"dino\": \"c v 0.577350269189626\",\n  \"little chop\": \"c e 0\",\n  \"pyramorphix\": \"t e 0\",\n  \"mastermorphix\": \"t e 0.346184634065199\",\n  \"pyraminx\": \"t v 0.333333333333333 v 1.66666666666667\",\n  \"master pyraminx\": \"t v 0 v 1 v 2\",\n  \"professor pyraminx\": \"t v -0.2 v 0.6 v 1.4 v 2.2\",\n  \"Jing pyraminx\": \"t f 0\",\n  \"master pyramorphix\": \"t e 0.866025403784437\",\n  \"megaminx\": \"d f 0.7\",\n  \"gigaminx\": \"d f 0.64 f 0.82\",\n  \"teraminx\": \"d f 0.64 f 0.76 f 0.88\",\n  \"petaminx\": \"d f 0.64 f 0.73 f 0.82 f 0.91\",\n  \"examinx\": \"d f 0.64 f 0.712 f 0.784 f 0.856 f 0.928\",\n  \"zetaminx\": \"d f 0.64 f 0.7 f 0.76 f 0.82 f 0.88 f 0.94\",\n  \"yottaminx\": \"d f 0.64 f 0.6914 f 0.7429 f 0.7943 f 0.8457 f 0.8971 f 0.9486\",\n  \"pentultimate\": \"d f 0\",\n  \"master pentultimate\": \"d f 0.1\",\n  \"elite pentultimate\": \"d f 0 f 0.145905\",\n  // exact value for starminx is sqrt(5(5-2 sqrt(5))/3)\n  \"starminx\": \"d v 0.937962370425399\",\n  \"starminx 2\": \"d f 0.23606797749979\",\n  \"pyraminx crystal\": \"d f 0.447213595499989\",\n  \"chopasaurus\": \"d v 0\",\n  \"big chop\": \"d e 0\",\n  \"skewb diamond\": \"o f 0\",\n  \"FTO\": \"o f 0.333333333333333\",\n  \"master FTO\": \"o f 0.5 f 0\",\n  \"Christopher's jewel\": \"o v 0.577350269189626\",\n  \"octastar\": \"o e 0\",\n  \"Trajber's octahedron\": \"o v 0.433012701892219\",\n  \"radio chop\": \"i f 0\",\n  \"icosamate\": \"i v 0\",\n  \"icosahedron 2\": \"i v 0.18759247376021\",\n  \"icosahedron 3\": \"i v 0.18759247376021 e 0\",\n  \"icosahedron static faces\": \"i v 0.84\",\n  \"icosahedron moving faces\": \"i v 0.73\",\n  \"Eitan's star\": \"i f 0.61803398874989\",\n  \"2x2x2 + dino\": \"c f 0 v 0.577350269189626\",\n  \"2x2x2 + little chop\": \"c f 0 e 0\",\n  \"dino + little chop\": \"c v 0.577350269189626 e 0\",\n  \"2x2x2 + dino + little chop\": \"c f 0 v 0.577350269189626 e 0\",\n  \"megaminx + chopasaurus\": \"d f 0.61803398875 v 0\",\n  \"starminx combo\": \"d f 0.23606797749979 v 0.937962370425399\",\n};\n\nexport type PuzzleName = keyof typeof PGPuzzles;\n","/* tslint:disable prefer-for-of */ // TODO\n\nimport { Quat, solvethreeplanes } from \"./Quat\";\n\n// Next we define a class that yields quaternion generators for each of\n// the five platonic solids.  The quaternion generators chosen are\n// chosen specifically so that the first quaternion doubles as a plane\n// description that yields the given Platonic solid (so for instance, the\n// cubical group and octahedral group are identical in math, but we\n// give distinct representations choosing the first quaternion so that\n// we get the desired figure.)  Our convention is one vertex of the\n// shape points precisely down.\n\n// This class is static.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function cube(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(s5, s5, 0, 0), new Quat(s5, 0, s5, 0)];\n}\n\nexport function tetrahedron(): Quat[] {\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(0.5, 0.5, 0.5, -0.5)];\n}\n\nexport function dodecahedron(): Quat[] {\n  const d36 = (2 * Math.PI) / 10;\n  let dx = 0.5 + 0.3 * Math.sqrt(5);\n  let dy = 0.5 + 0.1 * Math.sqrt(5);\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  return [\n    new Quat(Math.cos(d36), dx * Math.sin(d36), dy * Math.sin(d36), 0),\n    new Quat(0.5, 0.5, 0.5, 0.5),\n  ];\n}\n\nexport function icosahedron(): Quat[] {\n  let dx = 1 / 6 + Math.sqrt(5) / 6;\n  let dy = 2 / 3 + Math.sqrt(5) / 3;\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  const ang = (2 * Math.PI) / 6;\n  return [\n    new Quat(Math.cos(ang), dx * Math.sin(ang), dy * Math.sin(ang), 0),\n    new Quat(Math.cos(ang), -dx * Math.sin(ang), dy * Math.sin(ang), 0),\n  ];\n}\n\nexport function octahedron(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(s5, 0, 0, s5)];\n}\n\nexport function closure(g: Quat[]): Quat[] {\n  // compute the closure of a set of generators\n  // This is quadratic in the result size.  Also, it has no protection\n  // against you providing a bogus set of generators that would generate\n  // an infinite group.\n  const q = [new Quat(1, 0, 0, 0)];\n  for (let i = 0; i < q.length; i++) {\n    for (let j = 0; j < g.length; j++) {\n      const ns = g[j].mul(q[i]);\n      const negns = ns.smul(-1);\n      let wasseen = false;\n      for (let k = 0; k < q.length; k++) {\n        if (ns.dist(q[k]) < eps || negns.dist(q[k]) < eps) {\n          wasseen = true;\n          break;\n        }\n      }\n      if (!wasseen) {\n        q.push(ns);\n      }\n    }\n  }\n  return q;\n}\n\nexport function uniqueplanes(p: Quat, g: Quat[]): Quat[] {\n  // compute unique plane rotations\n  // given a rotation group and a plane, find the rotations that\n  // generate unique planes.  This is quadratic in the return size.\n  const planes = [];\n  const planerot = [];\n  for (let i = 0; i < g.length; i++) {\n    const p2 = p.rotateplane(g[i]);\n    let wasseen = false;\n    for (let j = 0; j < planes.length; j++) {\n      if (p2.dist(planes[j]) < eps) {\n        wasseen = true;\n        break;\n      }\n    }\n    if (!wasseen) {\n      planes.push(p2);\n      planerot.push(g[i]);\n    }\n  }\n  return planerot;\n}\n\nexport function getface(planes: Quat[]): Quat[] {\n  // compute a face given a set of planes\n  // The face returned will be a set of points that lie in the first plane\n  // in the given array, that are on the surface of the polytope defined\n  // by all the planes, and will be returned in clockwise order.\n  // This is O(planes^2 * return size + return_size^2).\n  const face = [];\n  for (let i = 1; i < planes.length; i++) {\n    for (let j = i + 1; j < planes.length; j++) {\n      const p = solvethreeplanes(0, i, j, planes);\n      if (p) {\n        let wasseen = false;\n        for (let k = 0; k < face.length; k++) {\n          if (p.dist(face[k]) < eps) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          face.push(p);\n        }\n      }\n    }\n  }\n  for (;;) {\n    let changed = false;\n    for (let i = 0; i < face.length; i++) {\n      const j: number = (i + 1) % face.length;\n      if (planes[0].dot(face[i].cross(face[j])) < 0) {\n        const t: Quat = face[i];\n        face[i] = face[j];\n        face[j] = t;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      break;\n    }\n  }\n  return face;\n}\n","/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n\n// We need a quaternion class.  We use this to represent rotations,\n// planes, and points.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function expandfaces(rots: Quat[], faces: Quat[][]): Quat[][] {\n  // given a set of faces, expand by rotation set\n  const nfaces = [];\n  for (let i = 0; i < rots.length; i++) {\n    for (let k = 0; k < faces.length; k++) {\n      const face = faces[k];\n      const nface = [];\n      for (let j = 0; j < face.length; j++) {\n        nface.push(face[j].rotateplane(rots[i]));\n      }\n      nfaces.push(nface);\n    }\n  }\n  return nfaces;\n}\n\nexport function centermassface(face: Quat[]): Quat {\n  // calculate a center of a face by averaging points\n  let s = new Quat(0, 0, 0, 0);\n  for (let i = 0; i < face.length; i++) {\n    s = s.sum(face[i]);\n  }\n  return s.smul(1.0 / face.length);\n}\n\nexport function random(): Quat {\n  // generate a random quat\n  const q = new Quat(\n    Math.random() * 2 - 1,\n    Math.random() * 2 - 1,\n    Math.random() * 2 - 1,\n    Math.random() * 2 - 1,\n  );\n  return q.smul(1 / q.len());\n}\n\nexport function solvethreeplanes(\n  p1: number,\n  p2: number,\n  p3: number,\n  planes: Quat[],\n): any {\n  // find intersection of three planes but only if interior\n  // Takes three indices into a plane array, and returns the point at the\n  // intersection of all three, but only if it is internal to all planes.\n  const p = planes[p1].intersect3(planes[p2], planes[p3]);\n  if (!p) {\n    return p;\n  }\n  for (let i = 0; i < planes.length; i++) {\n    if (i !== p1 && i !== p2 && i !== p3) {\n      const dt = planes[i].b * p.b + planes[i].c * p.c + planes[i].d * p.d;\n      if (\n        (planes[i].a > 0 && dt > planes[i].a) ||\n        (planes[i].a < 0 && dt < planes[i].a)\n      ) {\n        return false;\n      }\n    }\n  }\n  return p;\n}\n\nexport class FaceTree {\n  constructor(\n    public face: Quat[],\n    public left?: FaceTree,\n    public right?: FaceTree,\n  ) {}\n\n  public split(q: Quat): FaceTree {\n    const t = q.cutface(this.face);\n    if (t !== null) {\n      if (this.left === undefined) {\n        this.left = new FaceTree(t[0]);\n        this.right = new FaceTree(t[1]);\n      } else {\n        this.left = this.left?.split(q);\n        this.right = this.right?.split(q);\n      }\n    }\n    return this;\n  }\n\n  public collect(arr: Quat[][], leftfirst: boolean): Quat[][] {\n    if (this.left === undefined) {\n      arr.push(this.face);\n    } else if (leftfirst) {\n      this.left?.collect(arr, false);\n      this.right?.collect(arr, true);\n    } else {\n      this.right?.collect(arr, false);\n      this.left?.collect(arr, true);\n    }\n    return arr;\n  }\n}\n\nexport class Quat {\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number,\n    public d: number,\n  ) {}\n\n  public mul(q: Quat): Quat {\n    // Quaternion multiplication\n    return new Quat(\n      this.a * q.a - this.b * q.b - this.c * q.c - this.d * q.d,\n      this.a * q.b + this.b * q.a + this.c * q.d - this.d * q.c,\n      this.a * q.c - this.b * q.d + this.c * q.a + this.d * q.b,\n      this.a * q.d + this.b * q.c - this.c * q.b + this.d * q.a,\n    );\n  }\n\n  public toString(): string {\n    return \"Q[\" + this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d + \"]\";\n  }\n\n  public dist(q: Quat): number {\n    // Euclidean distance\n    return Math.hypot(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public len(): number {\n    // Euclidean length\n    return Math.hypot(this.a, this.b, this.c, this.d);\n  }\n\n  public cross(q: Quat): Quat {\n    // cross product\n    return new Quat(\n      0,\n      this.c * q.d - this.d * q.c,\n      this.d * q.b - this.b * q.d,\n      this.b * q.c - this.c * q.b,\n    );\n  }\n\n  public dot(q: Quat): number {\n    // dot product of two quaternions\n    return this.b * q.b + this.c * q.c + this.d * q.d;\n  }\n\n  public normalize(): Quat {\n    // make the magnitude be 1\n    const d = Math.sqrt(this.dot(this));\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public makenormal(): Quat {\n    // make a normal vector from a plane or quat or point\n    return new Quat(0, this.b, this.c, this.d).normalize();\n  }\n\n  public normalizeplane(): Quat {\n    // normalize a plane\n    const d = Math.hypot(this.b, this.c, this.d);\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public smul(m: number): Quat {\n    // scalar multiplication\n    return new Quat(this.a * m, this.b * m, this.c * m, this.d * m);\n  }\n\n  public sum(q: Quat): Quat {\n    // quaternion sum\n    return new Quat(this.a + q.a, this.b + q.b, this.c + q.c, this.d + q.d);\n  }\n\n  public sub(q: Quat): Quat {\n    // difference\n    return new Quat(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public angle(): number {\n    // quaternion angle\n    return 2 * Math.acos(this.a);\n  }\n\n  public invrot(): Quat {\n    // quaternion inverse rotation\n    return new Quat(this.a, -this.b, -this.c, -this.d);\n  }\n\n  public det3x3(\n    a00: number,\n    a01: number,\n    a02: number,\n    a10: number,\n    a11: number,\n    a12: number,\n    a20: number,\n    a21: number,\n    a22: number,\n  ): number {\n    // 3x3 determinant\n    return (\n      a00 * (a11 * a22 - a12 * a21) +\n      a01 * (a12 * a20 - a10 * a22) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  public rotateplane(q: Quat): Quat {\n    // rotate a plane using a quaternion\n    const t = q.mul(new Quat(0, this.b, this.c, this.d)).mul(q.invrot());\n    t.a = this.a;\n    return t;\n  }\n\n  // return any vector orthogonal to the given one.  Find the smallest\n  // component (in absolute value) and return the cross product of that\n  // axis with the given vector.\n  public orthogonal(): Quat {\n    const ab = Math.abs(this.b);\n    const ac = Math.abs(this.c);\n    const ad = Math.abs(this.d);\n    if (ab < ac && ab < ad) {\n      return this.cross(new Quat(0, 1, 0, 0)).normalize();\n    } else if (ac < ab && ac < ad) {\n      return this.cross(new Quat(0, 0, 1, 0)).normalize();\n    } else {\n      return this.cross(new Quat(0, 0, 0, 1)).normalize();\n    }\n  }\n\n  // return the Quaternion that will rotate the this vector\n  // to the b vector through rotatepoint.\n  public pointrotation(b: Quat): Quat {\n    const a = this.normalize();\n    b = b.normalize();\n    if (a.sub(b).len() < eps) {\n      return new Quat(1, 0, 0, 0);\n    }\n    let h = a.sum(b);\n    if (h.len() < eps) {\n      h = h.orthogonal();\n    } else {\n      h = h.normalize();\n    }\n    const r = a.cross(h);\n    r.a = a.dot(h);\n    return r;\n  }\n\n  // given two vectors, return the portion of the first that\n  // is not in the direction of the second.\n  public unproject(b: Quat): Quat {\n    return this.sum(b.smul(-this.dot(b) / (this.len() * b.len())));\n  }\n\n  public rotatepoint(q: Quat): Quat {\n    // rotate a point\n    return q.mul(this).mul(q.invrot());\n  }\n\n  public rotateface(face: Quat[]): Quat[] {\n    // rotate a face by this Q.\n    return face.map((_: Quat) => _.rotatepoint(this));\n  }\n\n  public rotatecubie(cubie: Quat[][]): Quat[][] {\n    // rotate a cubie by this Q.\n    return cubie.map((_: Quat[]) => this.rotateface(_));\n  }\n\n  public intersect3(p2: Quat, p3: Quat): Quat | false {\n    // intersect three planes if there is one\n    const det = this.det3x3(\n      this.b,\n      this.c,\n      this.d,\n      p2.b,\n      p2.c,\n      p2.d,\n      p3.b,\n      p3.c,\n      p3.d,\n    );\n    if (Math.abs(det) < eps) {\n      return false; // TODO: Change to `null` or `undefined`?\n    }\n    return new Quat(\n      0,\n      this.det3x3(this.a, this.c, this.d, p2.a, p2.c, p2.d, p3.a, p3.c, p3.d) /\n        det,\n      this.det3x3(this.b, this.a, this.d, p2.b, p2.a, p2.d, p3.b, p3.a, p3.d) /\n        det,\n      this.det3x3(this.b, this.c, this.a, p2.b, p2.c, p2.a, p3.b, p3.c, p3.a) /\n        det,\n    );\n  }\n\n  public side(x: number): number {\n    // is this point close to the origin, or on one or the other side?\n    if (x > eps) {\n      return 1;\n    }\n    if (x < -eps) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * Cuts a face by this plane, or returns null if there\n   * is no intersection.\n   * @param face The face to cut.\n   */\n  public cutface(face: Quat[]): Quat[][] | null {\n    const d = this.a;\n    let seen = 0;\n    let r = null;\n    for (let i = 0; i < face.length; i++) {\n      seen |= 1 << (this.side(face[i].dot(this) - d) + 1);\n    }\n    if ((seen & 5) === 5) {\n      r = [];\n      // saw both sides\n      const inout = face.map((_: Quat) => this.side(_.dot(this) - d));\n      for (let s = -1; s <= 1; s += 2) {\n        const nface = [];\n        for (let k = 0; k < face.length; k++) {\n          if (inout[k] === s || inout[k] === 0) {\n            nface.push(face[k]);\n          }\n          const kk = (k + 1) % face.length;\n          if (inout[k] + inout[kk] === 0 && inout[k] !== 0) {\n            const vk = face[k].dot(this) - d;\n            const vkk = face[kk].dot(this) - d;\n            const r = vk / (vk - vkk);\n            const pt = face[k].smul(1 - r).sum(face[kk].smul(r));\n            nface.push(pt);\n          }\n        }\n        r.push(nface);\n      }\n    }\n    return r;\n  }\n\n  public cutfaces(faces: Quat[][]): Quat[][] {\n    // Cut a set of faces by a plane and return new set\n    const nfaces = [];\n    for (let j = 0; j < faces.length; j++) {\n      const face = faces[j];\n      const t = this.cutface(face);\n      if (t) {\n        nfaces.push(t[0]);\n        nfaces.push(t[1]);\n      } else {\n        nfaces.push(face);\n      }\n    }\n    return nfaces;\n  }\n\n  public faceside(face: Quat[]): number {\n    // which side of a plane is a face on?\n    const d = this.a;\n    for (let i = 0; i < face.length; i++) {\n      const s = this.side(face[i].dot(this) - d);\n      if (s !== 0) {\n        return s;\n      }\n    }\n    throw new Error(\"Could not determine side of plane in faceside\");\n  }\n\n  public sameplane(p: Quat): boolean {\n    // are two planes the same?\n    const a = this.normalize();\n    const b = p.normalize();\n    return a.dist(b) < eps || a.dist(b.smul(-1)) < eps;\n  }\n\n  public makecut(r: number): Quat {\n    // make a cut from a normal vector\n    return new Quat(r, this.b, this.c, this.d);\n  }\n}\n","import { identity, Perm } from \"./Perm\";\n\nclass FactoredNumber {\n  public mult: number[];\n  constructor() {\n    this.mult = [];\n  }\n\n  public multiply(n: number): void {\n    for (let f = 2; f * f <= n; f++) {\n      while (n % f === 0) {\n        if (undefined !== this.mult[f]) {\n          this.mult[f]++;\n        } else {\n          this.mult[f] = 1;\n        }\n        n /= f;\n      }\n    }\n    if (n > 1) {\n      if (undefined !== this.mult[n]) {\n        this.mult[n]++;\n      } else {\n        this.mult[n] = 1;\n      }\n    }\n  }\n\n  public toString(): string {\n    let r = \"\";\n    for (let i = 0; i < this.mult.length; i++) {\n      if (undefined !== this.mult[i]) {\n        if (r !== \"\") {\n          r += \"*\";\n        }\n        r += i;\n        if (this.mult[i] > 1) {\n          r += \"^\" + this.mult[i];\n        }\n      }\n    }\n    return r;\n  }\n}\n\nexport function schreierSims(g: Perm[], disp: (s: string) => void): number {\n  const n = g[0].p.length;\n  const e = identity(n);\n  let sgs: Perm[][] = [];\n  let sgsi: Perm[][] = [];\n  let sgslen: number[][] = [];\n  let Tk: Perm[][] = [];\n  let Tklen: number[][] = [];\n  function resolve(p: Perm): boolean {\n    for (let i = p.p.length - 1; i >= 0; i--) {\n      const j = p.p[i];\n      if (j !== i) {\n        if (!sgs[i][j]) {\n          return false;\n        }\n        p = p.mul(sgsi[i][j]);\n      }\n    }\n    return true;\n  }\n  function knutha(k: number, p: Perm, len: number): void {\n    Tk[k].push(p);\n    Tklen[k].push(len);\n    for (let i = 0; i < sgs[k].length; i++) {\n      if (sgs[k][i]) {\n        knuthb(k, sgs[k][i].mul(p), len + sgslen[k][i]);\n      }\n    }\n  }\n  function knuthb(k: number, p: Perm, len: number): void {\n    const j = p.p[k];\n    if (!sgs[k][j]) {\n      sgs[k][j] = p;\n      sgsi[k][j] = p.inv();\n      sgslen[k][j] = len;\n      for (let i = 0; i < Tk[k].length; i++) {\n        knuthb(k, p.mul(Tk[k][i]), len + Tklen[k][i]);\n      }\n      return;\n    }\n    const p2 = p.mul(sgsi[k][j]);\n    if (!resolve(p2)) {\n      knutha(k - 1, p2, len + sgslen[k][j]);\n    }\n  }\n  function getsgs(): number {\n    sgs = [];\n    sgsi = [];\n    Tk = [];\n    sgslen = [];\n    Tklen = [];\n    for (let i = 0; i < n; i++) {\n      sgs.push([]);\n      sgsi.push([]);\n      sgslen.push([]);\n      Tk.push([]);\n      Tklen.push([]);\n      sgs[i][i] = e;\n      sgsi[i][i] = e;\n      sgslen[i][i] = 0;\n    }\n    let none = 0;\n    let sz = 1;\n    for (let i = 0; i < g.length; i++) {\n      knutha(n - 1, g[i], 1);\n      sz = 1;\n      let tks = 0;\n      let sollen = 0;\n      const avgs = [];\n      const mults = new FactoredNumber();\n      for (let j = 0; j < n; j++) {\n        let cnt = 0;\n        let lensum = 0;\n        for (let k = 0; k < n; k++) {\n          if (sgs[j][k]) {\n            cnt++;\n            lensum += sgslen[j][k];\n            if (j !== k) {\n              none++;\n            }\n          }\n        }\n        tks += Tk[j].length;\n        sz *= cnt;\n        if (cnt > 1) {\n          mults.multiply(cnt);\n        }\n        const avg = lensum / cnt;\n        avgs.push(avg);\n        sollen += avg;\n      }\n      disp(\n        \"\" +\n          i +\n          \": sz \" +\n          sz +\n          \" T \" +\n          tks +\n          \" sol \" +\n          sollen +\n          \" none \" +\n          none +\n          \" mults \" +\n          mults,\n      );\n    }\n    return sz;\n  }\n  return getsgs();\n}\n"],"names":["zeroCache","iotaCache","zeros","n","c","Array","i","iota","identity","Perm","random","j","Math","floor","t","factorial","a","r","gcd","b","m","lcm","constructor","length","p","toString","join","mul","p2","rmul","inv","compareTo","toGap","cyc","seen","incyc","push","order","cs","OrbitDef","size","mod","reassemblySize","pow","OrbitsDef","orbitnames","orbitdefs","solved","movenames","moveops","transformToKPuzzle","mp","orbits","toKpuzzle","toKsolve","name","result","appendConciseDefinition","start","numPieces","orientations","moves","startPieces","optimize","neworbitnames","neworbitdefs","newsolved","newmoveops","om","du","DisjointUnion","changed","k","perm","ori","union","keepori","duo","o","find","nontriv","multiple","h","no","on","nv","remapVS","remap","killOri","VisibleState","map","_","Transformation","scramble","pool","ri","rj","rm","s","Orbit","e","orimod","newPerm","newOri","equal","toPerm","identicalPieces","done","v","undefined","isIdentity","zeroOris","nextNew","reassign","ov","useVS","newori","kcache","permutation","orientation","TransformationBase","internalMul","newOrbits","internalInv","perms","mulScalar","heads","ah","bh","showcanon","g","disp","Error","orders","commutes","permA","bits","permB","curlev","d","sum","nextlev","uniq","sti","st","cnt","mv","nst","showcanon0","x","DEFAULT_COLOR_FRACTION","NEW_FACE_NAMES","useNewFaceNames","use","eps","copyright","permissivieMoveParsing","defaultnets","defaultcolors","F","D","L","R","U","B","BB","BL","BR","C","A","E","BF","I","G","S","H","J","K","M","O","P","N","Q","defaultfaceorders","defaultOrientations","findelement","dist","getpuzzles","PGPuzzles","getpuzzle","puzzleName","parsedesc","split","filter","Boolean","getPuzzleGeometryByDesc","desc","options","shape","cuts","pg","PuzzleGeometry","concat","allstickers","genperms","getPuzzleGeometryByName","getmovename","geo","slices","inverted","movenameFamily","movenamePrefix","String","toLowerCase","splitByFaceNames","facenames","at","currentMatch","substr","startsWith","toCoords","q","maxdist","toFaceCoords","trimEdges","face","tr","iter","pi","ni","sub","normalize","dot","sqrt","smul","good","cross","optionlist","NullMapper","asstructured","JSON","parse","asboolean","verbose","allmoves","outerblockmoves","vertexmoves","addrotations","cornersets","centersets","edgesets","graycorners","graycenters","grayedges","movelist","killorientation","fixPiece","orientCenters","puzzleOrientation","puzzleOrientations","args","console","log","header","create","moveplanes","moveplanes2","faces","cubies","rotations","baseplane","baseplanerot","baseplanes","rotateplane","basefacecount","net","colors","faceorder","baseface","zero","Quat","facenormal","makenormal","edgenormal","vertexnormal","boundary","planerot","planes","edgedistance","vertexdistance","cutplanes","intersects","sawface","sawedge","sawvertex","normal","distance","makecut","Number","basefaces","rotateface","faceplanes","vertexnames","edgenames","edgesperface","searchaddelement","jj","midpoint","otherfaces","facelist","el","facenametoindex","faceindextoname","f0","fi","ii","fn2","of","found","faceprecedence","faceplane","facename","jjj","midpoint2","e1","e2","swizzler","FaceNameSwizzler","sep","prefixFree","c1","c2","cornerfaces","geonormals","geonormalnames","setGripNames","wasseen","sameplane","ft","FaceTree","tar","slice","rval","collect","stickersperface","shortedge","addNotationMapper","setReidOrder","notationMapper","FaceRenamingMapper","keyface","keyface2","cm","moveplanesets","dv","findface","key","arr","facelisthash","face2","abs","facecentermass","findface2","project2d","facen","edgen","targvec","edgen2","plane","x0","olen","len","y0","delta","cosr","sinr","x1","y1","off","moveplanenormals","qnormal","normalizeplane","goodnormal","sort","sizes","moverotations","angle","reverse","sizes2","movesetorders","movesetgeos","gtype","p0","neg","pos","NxNxNCubeMapper","SkewbNotationMapper","PyraminxNotationMapper","MegaminxScramblingNotationMapper","FTONotationMapper","cubiehash","cubiekey","cubiekeys","suff","s2","Object","keys","cubie","cmall","looplimit","u","mini","minf","temp","getfaceindex","ocubie","ofacelist","facetocubies","typenames","cubiesetnames","cubietypecounts","orbitoris","cubiesetnum","cubiesetnums","cubieordnums","cubieords","cubievaluemap","getcolorkey","cubienum","cubiesetcubies","cubiekeymap","cubievalueid","facecnt","typectr","typename","queue","qg","cind","cubiecolorkey","tq","rotatepoint","reidorder","reidmap","mask","charCodeAt","fixedCubie","unswizzle","newmv","notationToInternal","family","stringToBlockMove","re","RegExp","match","grip","loslice","hislice","parseInt","amountstr","amount","substring","Move","QuantumMove","parseMove","move","bm","fullrotation","endsWith","innerLayer","outerLayer","msi","geoname","firstgrip","toUpperCase","effectiveAmount","parsemove","cmovesbyslice","kk","duplicatedFaces","duplicatedCubies","moveplaneset","slicenum","slicecnts","bhi","axiscmoves","sc","cubiedone","ocm","fi2","cm2","face1","face0","parsedmovelist","getfaces","__","getboundarygeometry","getmovesets","parsedmove","msg","dep","trim","newr","graybyori","skipbyori","skipcubie","skipset","set","comment","writegap","os","getOrbitsDef","mvs","movename","ip","writeksolve","od","writekpuzzle","fortwisty","moveNotation","PGNotation","getMoveFromBits","moverange","setmoves","movesetorder","moveorbits","oris","slicecmoves","mperm","setnum","inc","oinc","lastId","setnames","setdefs","moveset","allbits","ind","movesetgeo","movebits","mna","ksolvemovenames","getMovesAsPerms","getsolved","getOrientationRotation","desiredRotation","feature1name","direction1","feature2name","direction2","feature1","feature2","feature1geoname","feature2geoname","gn","r1","pointrotation","feature2rot","r2","unproject","getInitial3DRotation","rotDesc","generatesvg","w","threed","extendedges","dx","dy","ang","PI","cosa","cos","sina","sin","ndx","noise","drawedges","id","pts","color","needvertexgrips","neededgegrips","needfacegrips","boundarygeo","polyn","edges","minx","miny","maxx","maxy","f1","f","es","min","max","xoff","yoff","geos","bg","edges2","initv","connectat","gfi","thisface","caf0","epi","edgename","gf1","gf1i","otherface","mp2","p1","colormap","facegeo","hix","hiy","rot","sc2","mappt2d","fn","xoff2","xmul","facenum","svg","cubieori","cubieord","svggrips","addgrip","onface","pt","pt2","hypot","facecoords","ep","mpc","vp","html","triarea","ab","bc","ac","polyarea","coords","get3d","colorfrac","stickers","foundations","avgstickerarea","stickerColors","orbit","ord","fcoords","grips","bind","axis","getGeoNormal","divid","orbitNames","lookupMove","moveToKeyString","cache","pgmv","gripnames_arg","gripnames","names","joinByFaceIndices","list","spinmatch","userinput","longname","upperCaseGrip","notationToExternal","negate","internalNames","externalNames","convertString","suffix","upper","isLowerCase","convert","ngrip","child","fam","sw","cube","s5","tetrahedron","dodecahedron","d36","dd","icosahedron","octahedron","closure","ns","negns","uniqueplanes","getface","expandfaces","rots","nfaces","nface","centermassface","solvethreeplanes","p3","intersect3","dt","left","right","cutface","leftfirst","acos","invrot","det3x3","a00","a01","a02","a10","a11","a12","a20","a21","a22","orthogonal","ad","rotatecubie","det","side","inout","vk","vkk","cutfaces","faceside","FactoredNumber","mult","multiply","schreierSims","sgs","sgsi","sgslen","Tk","Tklen","resolve","knutha","knuthb","getsgs","none","sz","tks","sollen","avgs","mults","lensum","avg"],"version":3,"file":"puzzle-geometry.b4ff5f93.js.map"}